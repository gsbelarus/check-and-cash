%YAML 1.1
--- 
StructureVersion: "1.0"
Properties: 
  RUID: 147020498_1219248801
  Name: "GS.Торговое оборудование.ФР.Пирит"
  Caption: "GS.Торговое оборудование.ФР.Пирит"
  Version: "1.0.0.27"
  Optional: False
  Internal: True
  MD5: 291B3086B57B7AB0BBCB758C2B92462E
Uses: 
  - "147753062_69526485 GS.Общие.Хранилище"
  - "147020565_1219248801 GS.Торговое оборудование.ФР.Базовые классы"
  - "147019551_1219248801 GS.Торговое оборудование.Типы торгового оборудования"
Objects: 
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147019367_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "TVB_Ecr_Pirit"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "VBCLASSES"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2019-12-23T17:05:12+03:00
      DISPLAYSCRIPT: ~
      ENTEREDPARAMS: ~
      SCRIPT: | 
        Option Explicit
        ' ФР Пирит
        Class TVB_Ecr_Pirit
        '###############################################################################
        ' COM-объект для связи с ФР
        '###############################################################################
          Public Ecr
          
        '###############################################################################
        ' не выдавать сообщений
        '###############################################################################
          Private FSilentMode
          Public Property Get SilentMode
            SilentMode = FSilentMode
          End Property
          Public Property Let SilentMode(Value)
            FSilentMode = Value
          End Property
        
        '###############################################################################
        'ошибки
        '###############################################################################
          ' код и описание ошибки
          Public ErrorCode
          Public ErrorDescription
        
          ' Очистить ошибки
          Private Sub ClearError
            ErrorCode = 0
            ErrorDescription = ""
          End sub
        
          ' Была ли ошибка "не установлен СОМ объект для связи с ФР"
          Private Function NoDll
            NoDll = false
            If Not Assigned(Ecr) Then
              NoDll = true
              ErrorCode = - 1
              ErrorDescription = "Не установлен драйвер ФР Пирит"
            End If
          End Function
        
          ' получить описание по коду ошибки
          Private Function GetErrorDescription(Result)
            GetErrorDescription = False
            If Not NoDll Then
              If Result <> 0 Then
                ErrorCode = Result
                ErrorDescription = Ecr.GetErrorString(Result)
              Else
                GetErrorDescription = True
              End If
            End If
          End Function
          
          ' неизвестная ошибка
          ' Например, Res = 0, а в Ecr.ResultString - пусто, или код другой команды
          Private Sub UnknownErr
            ErrorCode = - 2
            ErrorDescription = "Неизвестная ошибка"
          End Sub
          
        '###############################################################################
        ' внешние объекты
        '###############################################################################
          Public ConnectionParams ' объект класса TVB_FR_ConnectionParams (параметры соединения)
          Public Styles 'объект класса TVB_FR_StyleParams (настройки стилей, шрифтов и тд)
          Public DeviceOptions ' объект класса TVB_FR_DeviceOptions (настройки печати, типа печатать ли налоги и тд)
          Public SessionInfo ' объект класса TVB_FR_SessionInfo - информация о смене (имя кассира, номер кассы и тд)
          Public ExternalFunctions ' объект со внешними функциями, вне класса ФР. Описаны в TVB_FR_ExternalFunctions
          Public CheckInfo 'данные по текущему чеку, класс TVB_FR_CheckInfo
          
          Private AdditionalSettings ' дополнительные параметры из формы параметров
        '###############################################################################
        ' Инициализация устройства
        '###############################################################################
        
        
          ' был ли ФР инициализирован
          Private FIsInit
          Public Property Get IsInit
            IsInit = FIsInit
          End Property
          
          ' разделітель параметров, сімвол esc chr(27)
          Private Splt
          
          ' Соедіненіе с ФР
          Private Function Connect
            Connect = false
            if NoDll then exit function
            
            dim Res
            ' открыть соедіненіе
            Res = Ecr.Open("COM" & ConnectionParams.ComNumber, ConnectionParams.BaudRate, ConnectionParams.Password)
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
            
            ' начало работы. Параметры - дата, время
            dim D, T
            D = FormatDate(Now)
            T = FormatTime(Now)
            Res =  Ecr.ExecuteCommand("10", D & Splt & T)
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
            
            Connect = true
          End Function
          
          ' проверить на критические ошибки
          Private Function CheckDeviceInfo
            CheckDeviceInfo = false
            ClearError
            if NoDll then exit function
            
            ' запросить статусы устройства
            dim Res
            Res = Ecr.ExecuteCommand("00", "")
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
            
            ' в ResultString записываются выходные параметры, разделенные Chr(27)
            ' Arr(0) - Статус фатального состояния КСА
            ' Arr(1) - Статус текущих флагов КСА
            ' Arr(2) -Статус документа
            ' Arr(3) -Статус флагов работы с СКНО (появилось в последних версиях прошивки)
            dim Arr
            Arr = Split(Ecr.ResultString, Splt)
            ' проверить на корректность массив, созданный на основании Ecr.ResultString
            if not CheckOutputFormat(Arr, 3) then exit function
            
            ' массивы с описаниями некоторых статусов. Инициализируются проседурой InitStateLists
            ' FListDeviceFatal - Статус фатального состояния КСА . Получается командой 0х00
            ' FListDeviceState - Статус текущих флагов КСА . Получается командой 0х00
            ' FListSKNO - Статус флагов работы с СКНО . Получается командой 0х00
            ' FListPrinter - Статусы печатающего устройства . Получается командой 0х04
            
            ' в FListDeviceFatal, FListSKNO и FListPrinter находятся исключительно ошибки
            ' Статус фатального состояния КСА
            if not CheckFlagList(Arr(0), FListDeviceFatal) then exit function
            
        
            ' Статус флагов работы с СКНО
            if not CheckFlagList(Arr(3), FListSKNO) then exit function
        
            
            ' запросить статусы печатающего устройства
            Res = Ecr.ExecuteCommand("04", "")
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
            Arr = Split(Ecr.ResultString, Splt)
            ' проверить на корректность массив, созданный на основании Ecr.ResultString
            if not CheckOutputFormat(Arr, 0 ) then exit function
        
            if not CheckFlagList(Arr(0), FListPrinter) then exit function
            
            ' проверка на конец смены. Если смена закончилась,
            ' то при печати Z1 не надо возвращать тескт ошибки
            if IsDayLimit then
              if FZ1InPrint then
                ClearError
              end if
            end if
        
            CheckDeviceInfo = true
          End Function
          
          ' установить флаги печати из объектов DeviceOptions, Styles,
          ' и просто флаги по умолчанию
          ' Почти все можно делать при открытой смене!
          Private Function SetParams
        
            SetParams = false
            if NoDll then exit function
            
            'Параметры чека(битовая маска)
            'Номер дизайна чека:
            ' біты 1-5
            '  0- обычный (*)
            '  1- расширенный
            '  2- экономный
            '  3- для бумаги 57мм
            '  16 и выше - дополнительные загружаемые дизайны
            'біты 6-7 Зарезервирован
            'біт 8
            ' = 0 Нумерация чеков КСА (*)
            ' = 1 Нумерация чеков внешней программой
            
            ' выбіраем стиль AdditionalSettings.DesignType дізайн
            dim Res
            Res = Ecr.ExecuteCommand("12", "2" & Splt & "0" & Splt & (AdditionalSettings.DesignType))
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
            
            ' Параметры ПУ (битовая маска)
            ' доп настройки печати из AdditionalSettings. Значение битов в PrintFlag
            '0: 0 Нормальный режим печати
            '   1 Печать с уменьшенным межстрочным интервалом, для экономии бумаги(*)
            '1: 0 Частичная отрезка чека(*)
            '   1 Полная отрезка чека
            '2: 0 Не печатать графический логотип(*)
            '   1 Печатать графический логотип (логотип должен быть предварительно загружен в ПУ)
            '3: 0 Не печатать вертикальные полосы на сервисных документах(*)
            '   1 Печатать вертикальные полосы на сервисных документах
            ' устанавливаем  бит 2 = 1 (печатать логотип), бит 3 = 0 (не печатать полосы).
            ' Бит 0 берем из AdditionalSettings.EconomicPrint, бит 1 из AdditionalSettings.FullCut
            dim PrintFlag
            PrintFlag = 4 ' бит 2 = 1,бит 3 = 0
            if AdditionalSettings.EconomicPrint then PrintFlag = PrintFlag + 1
            if AdditionalSettings.FullCut then PrintFlag = PrintFlag + 2
            Res = Ecr.ExecuteCommand("12", "1" & Splt & "0" & Splt & PrintFlag)
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
            
            ' ТЕКСТОВЫЕ ДЕСКРИПТОРЫ:
            'Как называется поле с номером счета
            'Как называется поле с остатком лимита
            'Как называется поле с доп информацией
            'Как называется поле с номером документа
            'Как называется поле тип пользователя (Официант, Кассир)
            'Как называется поле тип объека (например, столик)
            'Как называется поле тип внутри объекта (место за столиком)
            if not SetParams_Descriptors then exit function
            
            ' остальные параметры устанавливаются при закрытой смене
            if IsOpenShift then
              SetParams = true
              exit function
            end if
        
            ' установить время
            if not SetFRTime(Time) then exit function
            
            'налоги
            if not SetParams_TaxOptions then exit function
        
            ' настройки клише (2 строки - название компании, 2 - адрес, каждая может быть жирным или обычным шрифтом
            ' здесь же настраивается печать текста в конце чека
            if not SetParams_HeaderOptions then exit function
            
            ' ПАРАМЕТРЫ ТИПОВ ОПЛАТ
            ' Наличные
            ' Банк. карта
            ' Аванс
            ' Сертификат
            ' Безналичные
            ' В кредит
            ' Бонусы
            if not SetParams_PaymentOptions then exit function
        
            
            SetParams = true
          End Function
        
          ' настройки клише (2 строки - название компании, 2 - адрес, каждая может быть жирным или обычным шрифтом
          ' здесь же настраивается печать текста в конце чека
          ' (при закрытой смене)
          Private Function SetParams_HeaderOptions
            SetParams_HeaderOptions = false
            dim i, L, MaxCounter, oLine, Res
            MaxCounter = 4
            ' (2 строки - название компании, 2 - адрес)
            ' строки находятся в объекте Styles.HeaderLine
            for i = 0 to MaxCounter - 1
              set oLine = Styles.HeaderLine(i)
              if Assigned(oLine) then
                L = Trim(oLine.Text)
              else
                L = ""
              end if
              ' длина строки ограничена. 44 символа
              Res = Ecr.ExecuteCommand("12", "30" & Splt & i & Splt & Left(L, 44))
              if Res <> 0 then
                GetErrorDescription(Res)
                Exit Function
              end if
            next
            ' подножие чека (тоже 4 строки)
            for i = 0 to MaxCounter - 1
              set oLine = Styles.FooterLine(i)
              if Assigned(oLine) then
                L = Trim(oLine.Text)
              else
                L = ""
              end if
              ' длина строки ограничена. 44 символа
              Res = Ecr.ExecuteCommand("12", "31" & Splt & i & Splt & Left(L, 44))
              if Res <> 0 then
                GetErrorDescription(Res)
                Exit Function
              end if
            next
            SetParams_HeaderOptions = true
          End function
          
          
          ' установить параметры типов оплат (при закрытой смене)
          Private Function SetParams_PaymentOptions
            SetParams_PaymentOptions = false
            ' форма оплаты Наличные
            ' за наличными зарезервирован индекс 0
            'if not SetPaymentMean(0, Styles.PaymentTypes.SumNal.Text) then exit function
        
            ' форма оплаты Банковская карта
            if not SetPaymentMean(1, Styles.PaymentTypes.SumCard.Text) then exit function
        
            ' форма оплаты Безнал
            if not SetPaymentMean(2, Styles.PaymentTypes.SumBN.Text) then exit function
        
            ' форма оплаты Аванс
            if not SetPaymentMean(3, Styles.PaymentTypes.SumAdvance.Text) then exit function
        
            ' форма оплаты Сертификат
            if not SetPaymentMean(4, Styles.PaymentTypes.SumCertificate.Text) then exit function
        
            ' форма оплаты Кредит
            if not SetPaymentMean(5, Styles.PaymentTypes.SumCredit.Text) then exit function
        
            ' форма оплаты Бонус
            if not SetPaymentMean(6, Styles.PaymentTypes.SumBonus.Text) then exit function
            
            ' форма оплаты О!плати
            if not SetPaymentMean(8, Styles.PaymentTypes.SumOplati.Text) then exit function
            
            ' форма оплаты Спецпиание
            if not SetPaymentMean(7, Styles.PaymentTypes.SumExtraFood.Text) then exit function
            
            ' остальные счетчики пока не используются
            dim i
            for i = 9 to 15
              call SetPaymentMean(i, "")
            next
            
            SetParams_PaymentOptions = true
          End function
          
          
          ' установка наименований форм оплаты
          ' Text - Названте
          Private Function SetPaymentMean(ByVal DCode, Text)
            SetPaymentMean = false
            if NoDll then exit function
        
            dim Res
            Res = Ecr.ExecuteCommand("12", "32" & Splt & DCode & Splt & Left(Text, 18))
            If res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
        
            SetPaymentMean = true
          End Function
          
          ' установить текстовые(при закрытой смене)
          Private Function SetParams_Descriptors
            SetParams_Descriptors = false
            
            'Как называется поле с номером документа
            ' здесь же выводится поле с номером счета  Styles.DescriptorNames.BillNumber
            if not SetDescriptorText(1, Styles.DescriptorNames.DocNumber) then exit function
        
            'Как называется поле тип пользователя (Официант, Кассир)
            if not SetDescriptorText(2, Styles.DescriptorNames.UserType) then exit function
        
            'Как называется поле тип объека (например, столик)
            ' здесь же выводится тип внутри объекта (место за столиком) Styles.DescriptorNames.SectionType
            if not SetDescriptorText(3, Styles.DescriptorNames.PlaceType) then exit function
        
            'поля с доп информацией  AddInfo будут печататься как строки
        
            SetParams_Descriptors = true
          End Function
          
          ' установка текстовых дескрипторов
          Private Function SetDescriptorText(DCode, DValue)
            SetDescriptorText = false
            if NoDll then exit function
        
            dim Res
            if DValue <> "" then
              Res = Ecr.ExecuteCommand("12", "52" & Splt & DCode & Splt & Left(DValue, 30))
              If res <> 0 Then
                GetErrorDescription(Res)
                Exit Function
              End If
            end if
        
            SetDescriptorText = true
          End Function
          
          ' установить ставки налогов
          Private Function SetParams_TaxOptions ': boolean
            SetParams_TaxOptions = false
        
            if NoDll then exit function
        
            dim i, MaxCounter, oTax, Res
            ' всего налогов 6
            ' первая позиция - без налога
            set oTax = new TVB_FR_Tax
            oTax.Name = "Без НДС"
            if not SetTaxOption(0, oTax) then exit function
            ' максимум 5
            MaxCounter = 5
            ' очистить налоги , которые уже забиты в ФР
            for i = 1 to MaxCounter - 1
              set oTax = new TVB_FR_Tax
              if not SetTaxOption(i, oTax) then exit function
            next
            ' MaxCounter может быть и больще 6,
            ' однако мы не знаем, какие налоги в списке кривые
            ' если что, кривые налоги обрубит проверка на oTax.Code
            MaxCounter = DeviceOptions.TaxesCount
            for i = 0 to MaxCounter - 1
              set oTax = DeviceOptions.Tax(i)
              if  Assigned(oTax) then
                if oTax.Code >= 1 and oTax.Code <= 5 then
                  if (oTax.Percent < 0 or oTax.Percent > 99)  then oTax.Percent = 0
                  if not SetTaxOption(oTax.Code, oTax) then exit function
                end if
              end if
            next
            
            'Управление расчетами и печатью налогов(битовая маска)
            'биты:
            '0:
            '  0 - Не печатать налоги на отчетах
            '  1 - Печатать налоги на отчетах(*)
            '1:
            '  0 - Не печатать налоги на чеках
            '  1 - Печатать налоги на чеках(*)
            '2:
            '  0 - Не печатать нулевые налоговые суммы на отчетах(*)
            '  1 - Печатать нулевые налоговые суммы на отчетах
            '3:
            '  0 - Округлять сумму налога после каждой позиции (*)
            '  1 - Округлять сумму налога только после ввода всех позиций и скидок
            
            ' 0: DeviceOptions.PrintTaxPercents
            ' 1: DeviceOptions.PrintTaxDescription
            ' 2: 0
            ' 3: 0
            dim TaxMask
            TaxMask = 0
            if DeviceOptions.PrintTaxPercents then TaxMask = 1
            if DeviceOptions.PrintTaxDescription then TaxMask = TaxMask + 2
        
            Res = Ecr.ExecuteCommand("12", "6" & Splt & "0" & Splt & TaxMask)
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
            SetParams_TaxOptions = true
          End Function
          
          
          ' установка налога
          ' Tax - TVB_FR_Tax
          Private Function SetTaxOption(ByVal DCode, Tax) ': boolean
            SetTaxOption = false
            if NoDll then exit function
        
            dim Res
            Res = Ecr.ExecuteCommand("12", "40" & Splt & DCode & Splt & Left(Tax.Name, 18))
            If res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
            Res = Ecr.ExecuteCommand("12", "41" & Splt & DCode & Splt & EncodeSum(Tax.Percent))
            If res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
        
            SetTaxOption = true
          End Function
        
        
        
          ' Инициализация включает в себя соединение с ФР, настройку параметров ФР и открытие смены
          ' Инициализация происходит примерно по такой схеме:
          ' 1) Если уже был инициализирован - проверяем на критические ошибки (если это возможно) и выходим
          ' 2) Открывается соединение с ФР(например, занимается СОМ порт).
          '    Помните: сюда мы приходим, если
          '    а) это первое обращение к ФР после загрузки Геымина;
          '    б) флажок IsInited был сброшен при закрытии смены.
          '    Это нужно учитывать при открытии соединения
          '    (вдруг оно уже открыто? может, закрыть сначала, или не открывать заново, все зависит от ФР)
          ' 3) Установка дополнительных параметров. Это млгут быть настройки шрифтов, типов оплаты и тд.
          '    Настройки берется из StyleParams и DeviceOptions, или забиваются по умолчанию
          '    Часть параметров можно устанавливать только при закрытой смене, тч, если смена открыта, они игнорируютсяЕсли при их установке произошла ошибка, может быть сообщение,
          '   (например, если дата на ФР не совпадает)
          ' 4) Если смена не открыта, спрашиваем, открыть ли. Открываем
          ' 5) проверяем на критические ошибки
          Public Function Init  ': boolean
            ' если не создан объект со внешними ф-ями, создаем пустышку
            ' (внешние ф-и разные в разных подсистемах, поэтому мы не можем создать их при Class_Initialize)
            if not Assigned(ExternalFunctions) then
              set ExternalFunctions = new TVB_FR_ExternalFunctions
            end if
        
            Init = False
            ClearError
        
            if NoDll then
              exit function
              call ExternalFunctions.Log("Init", ErrorDescription, False)
            end if
        
            ' Если уже был инициализирован - проверяем на критические ошибки и выходим
            if FIsInit then
              if CheckDeviceInfo then
                Init = True
              else
                call ExternalFunctions.Log("Init", ErrorDescription, False)
              end if
              exit function
            end if
            
            'Открывается соединение
            if not Connect then exit function
            ' Дополнительные параметры. Если при их установке произошла ошибка, может быть сообщение,
            ' (например, если дата на ФР не совпадает)
            if not SetParams then exit function
        
            ' если смена не открыта
            if not IsOpenShift then
              if not FSilentMode Then
                if ExternalFunctions.MessageBox( _
                     "Дата и время на ФР: " & vbCrLf & _
                     GetFRDate & " " & GetFRTime & vbCrLf & _
                     "Открыть фискальную смену?", _
                     vbYesNo) = vbNo Then
                  exit function
                end if
              end if
              ' пытаемся открыть смену
              if not OpenDay then
                exit function
              end if
            end if
        
        
            Init = true
            FIsInit = true
          End Function
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        'Открытие, закрытие, состояние смены @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
          ' открыта ли смена
          Public Function IsOpenShift ' : boolean
            IsOpenShift = false
            if NoDll then exit function
            ' если 2й бит в статусе текущих флагов кса = 1, то смена открыта
            IsOpenShift = CheckDeviceStateFlag(2)
        
          End Function
        
          ' Открыть смену (можно проверить, что не открыта)
          Public Function OpenDay  ': boolean
            OpenDay = false
            if NoDll then exit function
            
            'вдруг уже открыта
            if IsOpenShift then
              OpenDay = true
              exit function
            end if
            
            'Открыть смену (0x23)
            'Входные параметры: нет.
            'Ответные параметры: нет.
            dim Res
            Res = Ecr.ExecuteCommand("23", "")
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
        
            OpenDay = true
          End Function
        
          ' закрытие смены (можно проверить, что не закрыта)
          ' на Пирит закрывается только сменным отчетом
          Public Function EndSession ': boolean
            EndSession = False
            if NoDll then exit function
            
            ' вдруг смена уже закрыта
            if not IsOpenShift then
              EndSession = true
              exit function
            end if
            ' Z1
            If Not PrintReportWithCleaning Then Exit Function
        
          End Function
        
          ' Номер смены
          Public Property Get ShiftNumber ': integer
            ShiftNumber = -1
            if NoDll then exit property
            
            ' Запрос сменных счетчиков и регистров (0x01)
            ' параметр = 1 - номер смены
            ' возвращает массив из двух элементов : Arr(0) - код команды = 1, Arr(1) - номер смены
            dim Res, Arr
            Res = Ecr.ExecuteCommand("01", "1")
            If Res <> 0 Then
              GetErrorDescription(Res)
              exit property
            End If
            Arr = Split(Ecr.ResultString, Splt)
            ' проверить на корректность массив, созданный на основании Ecr.ResultString
            if not CheckOutputFormat(Arr, 1) then exit property
            if IsNumeric(Arr(1)) then
              ShiftNumber = CLng(Arr(1))
            end if
          End Property
          
          ' флажок печати сменного отчета
          ' если печатается z1, то ошибку "Превышение лимита времени смены(24 часа)" можно игнорировать
          Private FZ1InPrint
          
          ' проверка на ошибку превышение лимита смены
          ' Эта ошибка при инициализации обрабатывается отдельно, тк
          ' инициализация может проходить для печати Z1
          Private Function IsDayLimit
            IsDayLimit = false
        
            if NoDll then exit function
            ' если 3й бит в статусе текущих флагов кса = 1, то превышение смены
            if CheckDeviceStateFlag(3) then
              ErrorCode = -3
              ErrorDescription = "Превышение лимита времени смены(24 часа)"
              IsDayLimit = true
            end if
          End Function
          
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        'НАЛОГИ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        
        
          ' проверить на корректность код налога.
          ' Не меньше 1, не больше 5
          ' ФР поддерживает 6 налогов, но первый налог должен быть нулевой, такие дела.
          Private Function CheckTaxRate(TaxNum)
            CheckTaxRate = ""
            if NoDll then exit function
            if TaxNum < 0 then exit function
            if TaxNum > 5 then exit function
            CheckTaxRate = CStr(TaxNum)
          End Function
          
        
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        ' Дата, время @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
          ' Дата в формате ФР для передачи в ф-ю ФР
          Private Function FormatDate(DT)
            FormatDate = Right("00" & Day(DT), 2) & Right("00" & Month(DT), 2) & Right(Year(DT), 2)
          End Function
          
          ' Время в формате ФР для передачи в ф-ю ФР
          Private Function FormatTime(DT)
            FormatTime = Right("00" & Hour(DT), 2) & Right("00" & Minute(DT), 2) & Right("00" & Second(DT), 2)
          End Function
          
          ' запросить дату, время
          Private Function GetFRDateTime
            GetFRDateTime = Array(CDate(-1), TimeSerial(0,0,0))
            if NoDll then exit function
            ' запросить дату, время
            dim Res
            Res = Ecr.ExecuteCommand("13", "")
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
            dim Arr
            Arr = Split(Ecr.ResultString, Splt)
            ' проверить на корректность массив, созданный на основании Ecr.ResultString
            if not CheckOutputFormat(Arr, 1) then exit function
            
            dim SD, ST
            SD = Arr(0)
            ST = Arr(1)
            if len(SD) <> 6 or len(ST) <> 6 then
              UnknownErr
              Exit Function
            end if
            if not (IsNumeric(SD) and IsNumeric(ST)) then
              UnknownErr
              Exit Function
            end if
            GetFRDateTime = Array( _
               DateSerial(Right(SD,2), Mid(SD, 3,2), Left(SD,2)) , _
               TimeSerial(Left(ST,2), Mid(ST, 3,2), Right(ST,2)) )
          End Function
          
          ' Прочитать дату
          Public Function GetFRDate ': date
            dim Res
            Res = GetFRDateTime
            GetFRDate = Res(0)
          End Function
        
          ' Прочитать время
          Public Function GetFRTime ': time
            dim Res
            Res = GetFRDateTime
            GetFRTime = Res(1)
          End Function
        
          ' Установить время
          ' Value : time
          Public Function SetFRTime(Value) ': boolean
            SetFRTime = false
            if NoDll then exit function
            
            ' Параметры - дата, время
            dim D, T
            D = FormatDate(GetFRDate) ' дату не меняем, берем ту, что на ФР
            T = FormatTime(Value)
            dim Res
            Res =  Ecr.ExecuteCommand("14", D & Splt & T)
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
            
            SetFRTime = true
          End Function
          
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        ' Сведения о регистрации ФР @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
          ' заводской номер
          Public Property Get SerialNumber
            SerialNumber = ""
            
            if NoDll then exit property
        
            dim Res, Arr
            Res = Ecr.ExecuteCommand("02", "1")
            If Res <> 0 Then
              GetErrorDescription(Res)
              exit property
            End If
            Arr = Split(Ecr.ResultString, Splt)
            ' проверить на корректность массив, созданный на основании Ecr.ResultString
            if not CheckOutputFormat(Arr, 1) then exit property
            SerialNumber = Trim(Arr(1))
        
          End Property
          
          ' регистрационный номер
          Public Property Get RegisterNumber
            RegisterNumber = ""
            
            if NoDll then exit property
        
            dim Res, Arr
            Res = Ecr.ExecuteCommand("02", "4")
            If Res <> 0 Then
              GetErrorDescription(Res)
              exit property
            End If
            Arr = Split(Ecr.ResultString, Splt)
            ' проверить на корректность массив, созданный на основании Ecr.ResultString
            if not CheckOutputFormat(Arr, 1) then exit property
            RegisterNumber = Trim(Arr(1))
            
          End Property
          
          ' УНП
          Public Property Get TAXID
            TAXID = ""
            
            if NoDll then exit property
        
            dim Res, Arr
            Res = Ecr.ExecuteCommand("02", "3")
            If Res <> 0 Then
              GetErrorDescription(Res)
              exit property
            End If
            Arr = Split(Ecr.ResultString, Splt)
            ' проверить на корректность массив, созданный на основании Ecr.ResultString
            if not CheckOutputFormat(Arr, 1) then exit property
            TAXID = Trim(Arr(1))
        
          End Property
          
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        ' Функции печати чека @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
          ' есть ли открытый док-т на ФР
          Private Function HasActiveDocument ': boolean
            HasActiveDocument = false
            
            if NoDll then exit function
            ' запросить статусы устройства
            dim Res
            Res = Ecr.ExecuteCommand("00", "")
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
        
            ' в ResultString записываются выходные параметры, разделенные Chr(27)
            ' Arr(0) - Статус фатального состояния КСА
            ' Arr(1) - Статус текущих флагов КСА
            ' Arr(2) - Статус документа
            ' Arr(3) - Статус флагов работы с СКНО (появилось в последних версиях прошивки)
            dim Arr
            Arr = Split(Ecr.ResultString, Splt)
            ' проверить на корректность массив, созданный на основании Ecr.ResultString
            if not CheckOutputFormat(Arr, 3) then exit function
        
            if not IsNumeric(Arr(2)) then exit function
            
            if Arr(2) <> 0 then
              HasActiveDocument = true
            end if
          End Function
          ' Отмена открытого чека
          Public Function CancelOpenCheck ': boolean
            CancelOpenCheck = False
        
            if NoDll then exit function
            ' 3.4.8 Отменить документ (0x32)
            ' Эта команда прерывает формирование текущего документа, данные удаляются из оперативной памяти КСА и печатается сообщение об отмене.
            ' Входные параметры: нет.
            ' Ответные параметры: нет.
            dim Res
            Res = Ecr.ExecuteCommand("32", "")
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
            CancelOpenCheck = true
          End Function
          
          ' печать произвольной строки
          ' S : string
          Public Function TextLine (S) ' :boolean
            if CheckInfo.CheckType = ecr_CheckType_Text then
              TextLine = TextLineFlags(S, 0)
            else  ' в не-текстовом документе нельзя печатать строки, но можно дескрипторы
              call PrintDescriptor(S, 0, 0)
            end if
          End Function
          
          ' печать произвольной строки
          ' S : string, Flags :integer (настройки шрифта)
          Private Function TextLineFlags (S, Flags) ' :boolean
            TextLineFlags = false
            If NoDll Then Exit Function
            ' Печать текста (0x40)
            ' C помощью данной команды печатается текст внутри открытого сервисного документа.
            ' Входные параметры: (Строка[1..72]) Текст, (Целое число)Атрибуты текста
            S = Left(S, 72)
            dim Res
            Res = Ecr.ExecuteCommand("40", S & Splt & Flags)
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
            TextLineFlags = true
          End Function
          
          ' Открыть чек
          ' Если был открытый чек - отменить его
          ' Установить доп. текстовые дескрипторы (Лимит, доп. инфо, официант, столик и тд)
          ' Задать пользователя (кассира)
          ' Напечатать шапку
          ' Открыть документ на ФР
          ' напечатать доп информацию, если  нужна
          ' У ф-и нет параметров. Данные берутся из CheckInfo, SessionInfo
          Public Function OpenCheck  ': boolean
            OpenCheck = False
            If NoDll Then Exit Function
        
            ' если уже есть открытый чек - отменить его
            If HasActiveDocument <> 0 Then
              CancelOpenCheck
            End If
            
            dim TypeCode
            Select Case CheckInfo.CheckType
              Case ecr_CheckType_Sell  'Продажа
                TypeCode = 2
              Case ecr_CheckType_Return  'Возврат
                TypeCode = 3
              Case ecr_CheckType_Text  'Нефискальный
                TypeCode = 1
              Case ecr_CheckType_Annul  'Аннулирование
                OpenCheck = true
                exit function
              Case ecr_CheckType_Precheck 'Пречек
                TypeCode = 11
            End Select
            
            Dim DepNum
            if CheckInfo.DepartmentNumber > 0 and CheckInfo.DepartmentNumber <= 99 then
              DepNum = CheckInfo.DepartmentNumber
            else
              DepNum = 1
            end if
        
        '    dim DocumentNumber
        '    DocumentNumber = 0
        '    on error resume next
        '     DocumentNumber =  CheckInfo.DocumentNumber
        '    on error goto 0
        '    if DocumentNumber = 0 then DocumentNumber = 2
            
            '    Открыть документ (0x30)
            '    Эта команда открывает новый документ и переводит КСА в режим ввода документа.
            '    После успешного выполнения этой команды во внутренней переменной «статуса документа»
            '    устанавливается соответствующий тип текущего документа.
            '    Этот статус можно получить по команде “Запрос флагов статуса КСА”.
            '    Входные параметры:
            '      (Целое число)Режим и тип документа,
            '      (Целое число1..99)Номер отдела,
            '      (Имя оператора)Код и/или имя оператора,
            '      (Целое число)Номер документа
            '    Режим и тип документа - число, в котором зашит тип и доп флаги.
            '      Доп флаги = 0, поэтому в нашем случае все число равно типу док-та
            
            dim Res
            Res = Ecr.ExecuteCommand("30", TypeCode & Splt & DepNum & Splt & SessionInfo.UserName & Splt & "0")
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
            
            dim Arr
            Arr = Split(Ecr.ResultString, Splt)
            ' проверить на корректность массив, созданный на основании Ecr.ResultString
            ' в  Arr(0) попадает сквозной номер
            if not CheckOutputFormat(Arr, 0 ) then exit function
        
            ' для пречека печатаем системный номер, чтобы проще его было искать в ленте
            if CheckInfo.CheckType = ecr_CheckType_Precheck then
               CheckInfo.DocumentNumber =  Arr(0)
            end if
            
            if CheckInfo.PrintHeader then
              ' печать шапки чека (номер, официант и тд)
              PrintHeader
            end if
            
            OpenCheck = true
            
            ' запись в лог
            dim LogFlag, LogName, LogText
            select case CheckInfo.CheckType
              case ecr_CheckType_Sell
                LogName = "OpenCheck"
                LogText = "Чек продажи "
              case ecr_CheckType_Return
                LogName = "OpenCheckReturn"
                LogText = "Чек возврата "
              case ecr_CheckType_Text
                LogName = "NonFiscalOpen"
                LogText = "Нефискальный чек "
              case ecr_CheckType_Annul
                LogName = "OpenCheckAnnul"
                LogText = "Чек аннулирования "
              case ecr_CheckType_Precheck
                LogName = "NonFiscalOpen"
                LogText = "Пречек "
            end select
            if Res <> 0 then
              LogFlag = False
              LogText = LogText & "не открыт: " & ErrorDescription
            else
              LogFlag = False
              LogText = LogText & "открыт"
            end if
        
            call ExternalFunctions.Log(LogName, LogText, LogFlag)
        
            if CheckInfo.CheckType <> ecr_CheckType_Text then exit function
        
            ' для нефискальных чеков может быть доп. информация
            if CheckInfo.DublicateCheck > 0 then
              call TextLine("Дубликат чека № " & CheckInfo.DublicateCheck)
            elseif CheckInfo.PendingCheck > 0 then
              call TextLine("Отложенный чек № " & CheckInfo.PendingCheck)
            end if
        
              ' строка - разделитель для нефискального док-та
            call TextLine(String(40, "-"))
          End Function
          
          ' печать шапки чека
          Private Function PrintHeader ': boolean
            PrintHeader = False
            ClearError
            If NoDll Then Exit Function
        
            dim Str
            Str = ""
            if CheckInfo.DocumentNumber <> "" then
              Str = Styles.DescriptorNames.DocNumber & ": " & CheckInfo.DocumentNumber
            end if
            ' номер док-та и (возможно) номер заказа
            if Styles.DescriptorNames.BillNumber <> "" and CheckInfo.BillNumber <> "" then
              if Str <> "" then Str = Str & VBCR
              Str = Str & Styles.DescriptorNames.BillNumber & ": " & CheckInfo.BillNumber
            end if
            if not PrintDescriptor(Str, 1, Styles.ValueFonts.DocNumber) then exit function
            
            Str = ""
            if Styles.DescriptorNames.UserType <> "" then
              ' официант \ кассир
              if CheckInfo.WaiterName <> "" then
                Str = CheckInfo.WaiterName
              else
                Str = SessionInfo.UserName
              end if
              Str = Styles.DescriptorNames.UserType & ": " & Str
              if not PrintDescriptor(Str, 2, Styles.ValueFonts.User) then exit function
            end if
            
            Str = ""
            ' магазин
            if not SessionInfo.IsRestaurant then
              ' номер магазина и (возможно) номер кассы
              if Styles.DescriptorNames.PlaceType <> "" and SessionInfo.ShopNumber <> 0 then
                Str = Styles.DescriptorNames.PlaceType & ": " & SessionInfo.ShopNumber
              end if
              if Styles.DescriptorNames.SectionType <> "" and SessionInfo.CashNumber <> 0 then
                if Str <> "" then Str = Str & VBCR
                Str = Str & Styles.DescriptorNames.SectionType & ": " & SessionInfo.CashNumber
              end if
              if not PrintDescriptor(Str, 3, Styles.ValueFonts.PlaceType) then exit function
            ' ресторан, кафе, столовая
            else
              ' номер столика и (возможно) номер места за столиком
              if Styles.DescriptorNames.PlaceType <> "" and CheckInfo.TableNumber <> 0 then
                Str = Styles.DescriptorNames.PlaceType & ": " &  CheckInfo.TableNumber
              end if
              if Styles.DescriptorNames.SectionType <> "" and CheckInfo.PlaceNum <> 0 then
                if Str <> "" then Str = Str & VBCR
                Str = Str & Styles.DescriptorNames.SectionType & ": " & CheckInfo.PlaceNum
              end if
              if not PrintDescriptor(Str, 3, Styles.ValueFonts.PlaceType) then exit function
            end if
        
            PrintHeader = true
            call ExternalFunctions.Log("Header", "Печать клише" , true)
        
          End Function
          
        
          
          ' печать дескриптора
          ' S - значение (может быть несколько строк, разделенных VBCR)
          ' Num - номер (1-5)
          ' Font - шрифт  TVB_FR_Font
          Private Function PrintDescriptor(S, Num, Font) ': boolean
            PrintDescriptor = false
            if Trim(S) = "" then
              PrintDescriptor = true
              exit function
            end if
            'Печать реквизита (0x49)
            '    C помощью данной команды могут печататься дополнительные реквизиты чека,
            '    при открытом чеке на продажу, возврат, внесения или изъятия.
            '    Входные параметры:
            '      (Целое число) Код реквизита,
            '      (Целое число) Атрибуты текста (биты 0-3 - размер шрифта, 4 - двойная высота, 5 - двойная ширина
            '      (Строка[56]) Значение реквизита 1-я строка,
            '      (Строка[56]) Значение реквизита 2-я строка,
            '      (Строка[56]) Значение реквизита 3-я строка,
            '      (Строка[56]) Значение реквизита 4-я строка.
            '    Код реквизита должен соответствовать
            '    одному из запрограммированных наименований реквизита
            '    в “Таблице настроек КСА”.
            
            dim FontCode
            ' собрать флаги шрифта в число
            FontCode = GetFontFlagsByFontObject(Font)
            
            ' разбить на массив строк
            dim Arr, ArrLine, StrSize
            StrSize = 56
            Arr = Split(S, VBCR)
            
            ' если строка длиннее 56 символов, разбить ее на несколько
            dim i, SBeg, SEnd,  TV
            for i = 0 to UBound(Arr)
              SEnd = Arr(i)
              SBeg = ""
              while Len(SEnd) > 0
                TV = Left(SEnd, StrSize)
                if SBeg <> "" then SBeg = SBeg & VBCR
                SBeg = SBeg & TV
                SEnd = Right(SEnd, Len(SEnd) - Len(TV))
              wend
              Arr(i) = SBeg
            next
            S = Join(Arr, VBCR)
            Arr = Split(S, VBCR)
        
            dim Res
            for i = 0 to UBound(Arr)
             if Arr(i) <> "" then
               if CheckInfo.CheckType = ecr_CheckType_Text then
               ' для нефискального док-та нельзя печатать дескрипторы как дескрипторы, но можно как строки!
                  if not TextLineFlags(Arr(i), FontCode) then exit function
                else
                ' для фискальных док-тов печатаем дескриптор как дескриптор
                  Res = Ecr.ExecuteCommand("49", Num & Splt & FontCode & Splt & Arr(i) & Splt & Splt & Splt)
                  If Res <> 0 Then
                    GetErrorDescription(Res)
                    call ExternalFunctions.Log("Header", "Печать клише: " & ErrorDescription, false)
                    Exit Function
                  End If
                end if
              end if
            next
        
            PrintDescriptor = true
          End Function
          
          'поменять Имя_ТМЦ на Имя_ТМЦхЦена
          ' эта ф-я нужна, если мы не уверены в округлении на фр.
          ' Например, знаем Кол-во, Цену, Сумму, но Кол-во Х Цена != Сумма.
          ' Тогда на ФР передаем кол-во = 1, цена = сумма, имя ТМЦ = FormGoodName
          Private Function FormGoodName(GoodName, Quantity, Price)
            Dim SP
            SP = " " & CStr(Quantity) & " x " & CStr(Price)
            
            dim L
            L = Len(SP)
            FormGoodName =  Left(GoodName, 56 - L) & SP
          End Function
        
         ' Печать позиции чека----------------------------------------------------------
          ' qParams - объект класса TVB_FR_Sale
          ' Quantity - кол-во
          ' Price - цена
          ' PriceSale - цена продажи
          ' GoodName - наименование ТМЦ
          ' Summ - сумма
          ' SumWithD - сумма со скидкой
          ' DepNumber - номер отдела
          ' BarCode - шифр товара
          ' ValueName - единица измерения
          ' TaxCode - код налога
          ' PercDisc - % скидки
          ' GTIN - уникальный код
          ' IsPrepayment является предоплатой (например, для печати информации об авансе в пречеке)
          ' IsService - является ли услугой
          '
          'ВАЖНО:
          '1) если в ФР есть ограничение на длину имени ТМЦ, номер подразделения, код налога и тд, ф-я должна это контролировать
          '2) если Кол-во Х Цена != Сумма, используем FormGoodName (см описание ее)
          '3) для чека возврата и отмены позиции кол-во и сумма отрицательные
          '4) тип чека можно определить по CheckInfo.CheckType. Позицию можно добавлять в продажу, возврат, нефискальный чек
          '5) при продаже используем Price и Summ, при возврате -  PriceSale и  SumWithD
          '6) GTIN  используется, если стоит галочка в параметрах  DeviceOptions.UseSKNO
          Public Function Sale(qParams) ': boolean
            Sale = False
            if NoDll then exit function
        
            dim Quantity :   Quantity = CCur(qParams.Quantity)
            dim Price :      Price = CCur(qParams.Price)
            dim PriceSale :  PriceSale = CCur(qParams.PriceSale)  'PriceSale используется ТОЛЬКО в чеках возврата
            dim GoodName :   GoodName = qParams.GoodName
            dim Summ :       Summ = CCur(qParams.Summ)
            dim SumWithD :   SumWithD = CCur(qParams.SumWithD)
            dim DepNumber :  DepNumber = qParams.DepNumber
            dim TaxCode :    TaxCode = qParams.TaxCode
            dim PercDisc :   PercDisc = CCur(qParams.PercDisc)
            dim GTIN :       GTIN = qParams.GTIN
            dim SumDiscount :SumDiscount = CCur(qParams.SumDiscount)
        
            if SumDiscount = 0 and (SumWithD <> 0 or Summ <> 0) then SumDiscount = Summ - SumWithD
        
            ' возврат производиться по цене со скидкой (по которой ТМЦ был продан)
            If CheckInfo.CheckType = ecr_CheckType_Return Then
              Price = PriceSale
              Summ = SumWithD
            End If
            
            ' номер секции от 1 до 16
            dim DepStr
            if not DeviceOptions.PrintDepCode then
              DepStr = ""
            else
              If DepNumber <= 0 Then DepNumber = 1
              If DepNumber > 16 Then DepNumber = 1
              DepStr = CStr(DepNumber)
            end if
            
            GoodName = left(GoodName, 56)
            'Добавить товарную позицию (0x42)
            'Эта команда может быть вызвана сразу после открытия чека
            ' и может повторяться любое количество раз (не считая документа возврата:
            ' в него можно передать тольк один раз команду 42 с любым количеством,
            ' данное требование введено из-за специфики работы СКНО)
            ' внутри текущего документа для отражения всего списка товаров.
            'Входные параметры:
            '   (Строка[0..56]) Название товара,
            '   (Строка[0..18]) признак (A-не GTIN, B-GTIN, C-услуга)
            '      и сам штриховой код позиции
            '     (т. е. если товар с GTIN, то передавать необходимо:
            '     Bxxx, где ххх — штриховой код GTIN),
            '   (Дробное число) Количество товара в товарной позиции,
            '   (Дробное число) Цена товара по данному артикулу,
            '   (Целое число 0..5) Номер ставки налога,
            '   (Строка[0..4]) Номер товарной позиции,
            '   (Целое число 1..16) Номер секции.
            'Для повышения точности вычислений, можно передавать количество с точностью до 9 знаков после запятой,
            'при этом в умножении на цену будет участвовать 9 знаков после запятой, а печататься только первые 3.
            'Параметры ”Номер ставки налога”, “Номер секции” и ”Номер товарной позиции”
            'не являются обязательными и могут отсутствовать.
            'Параметр “Номер товарной позиции” должен заканчиваться разделителем, например двоеточие, пробел, точку и т.д.
        
            'Коррекция товарной позиции (0x43)
            'Эта команда может отменить любую товарную позицию в чеке.
            'Входные параметры:
            '   (Строка[0..56]) Название товара,
            '   (Строка[0..18]) Артикул или штриховой код товара/ номер ТРК,
            '   (Дробное число) Количество товара в товарной позиции,
            '   (Дробное число) Цена товара по данному артикулу,
            '   (Целое число 0..5) Номер ставки налога,
            '   (Строка[0..4]) Номер товарной позиции,
            '   (Целое число 1..16) Номер секции.
            'Для повышения точности вычислений, можно передавать количество с точностью до 9 знаков после запятой, при этом в умножении на цену будет участвовать 9 знаков после запятой, а печататься только первые 3.
            'Параметры ”Номер ставки налога”, “Номер секции” и ”Номер товарной позиции” не являются обязательными и могут отсутствовать.
            'Параметр “Номер товарной позиции” должен заканчиваться разделителем, например двоеточие, пробел, точку и т.д.
        
            dim GoodCode
            if qParams.IsService then
              GoodCode = "C" & qParams.Barcode
            elseif DeviceOptions.UseSKNO  then
              GoodCode = "B" & GTIN
            else
              GoodCode = "A" & qParams.Barcode
            End If
            
        '    If (CheckInfo.CheckType <> ecr_CheckType_Text) Then
        '      ' весовой товар - могут возникнуть проблемы с округлением
        '      ' Все это имеет значение только для фискальных чеков
        '      If Abs(Summ) <> Abs(Price * Quantity) Then
        '        ' имя превращаем в "имя кол-во Х цена "
        '        ' кол-во - в 1, а цену - в сумму
        '        GoodName = FormGoodName(GoodName, Abs(Quantity), Price)
        '        If Quantity >= 0 Then
        '          Quantity = 1
        '        Else
        '          Quantity = -1
        '        End If
        '        Price = Abs(Summ)
        '      End If
        '    End If
            
            dim GoodStr, Res , ShortGoodName
            
            GoodStr = _
                GoodName & Splt & _
                GoodCode & Splt & _
                EncodeSum(Abs(Quantity))& Splt & _
                EncodeSum(Price) & Splt & _
                CheckTaxRate(TaxCode) & Splt & _
                "" & Splt & _
                DepStr
              
            
            ' запись в лог
            dim LogFlag, LogName, LogText
            
            ' IsPrepayment  является предоплатой (например, для печати информации об авансе в пречеке)
            if qParams.IsPrepayment then
              LogName = "NonFiscalPos"
              LogText = "Дополнительно: " & qParams.GoodName &  " сумма " & qParams.Summ
              if not TextLine(qParams.GoodName & ": " & FormatCur(qParams.Summ)) then
                LogText = LogText & " " &  ErrorDescription
                LogFlag = false
              else
                LogFlag = true
              end if
              call ExternalFunctions.Log(LogName, LogText, LogFlag)
              Sale = GetErrorDescription(res)
              exit function
            end if
            
            ' если продажа
            If Quantity >= 0 Then
              ' фискальные чеки
              If (CheckInfo.CheckType <> ecr_CheckType_Text) Then
                    
                Res = Ecr.ExecuteCommand("42", GoodStr)
        
                LogName = "Pos"
                LogText = "Продажа: " & qParams.GoodName & " кол-во " & qParams.Quantity & " цена " &  qParams.Price
                if Res <> 0 then
                  LogText = LogText & " " &  ErrorDescription
                  LogFlag = false
                else
                  LogFlag = true
                end if
                call ExternalFunctions.Log(LogName, LogText, LogFlag)
        
                ' для чека продажи и пречека печатается скидка, если есть
                If (CheckInfo.CheckType = ecr_CheckType_Sell or CheckInfo.CheckType = ecr_CheckType_Precheck) And Res = 0 Then
                  If Abs(Summ) <> Abs(SumWithD) Then
                    SumDiscount = Abs(Summ) - Abs(SumWithD)
                    if not PrintFiscalDisc(SumDiscount, PercDisc, "") then exit function
                  End If
                End If
              ' нефискальные чеки
              Else
                ' строка "продажи"
        
                LogName = "NonFiscalPos"
                LogText = "Продажа: " & qParams.GoodName & " кол-во " & qParams.Quantity & " цена " & qParams.Price
                if not PrintLineWithMiddleSpaces(qParams.GoodName, qParams.Quantity & "x" & FormatCur(qParams.Price), 40) then
                  LogText = LogText & " " &  ErrorDescription
                  LogFlag = false
                else
                  LogFlag = true
                end if
                call ExternalFunctions.Log(LogName, LogText, LogFlag)
        
                ' скидка, если есть
                if LogFlag  then
                  If SumDiscount <> 0  Then
                    ShortGoodName = FormatCur(-SumDiscount)
                    if PercDisc <> 0 then
                      ShortGoodName = ShortGoodName &  " (" & PercDisc & "%)"
                    end if
        
                    LogName = "NonFiscal"
                    LogText = "Скидка: " & ShortGoodName
                    if not PrintLineWithMiddleSpaces("Скидка: ", ShortGoodName, 40) then
                      LogText = LogText & " " &  ErrorDescription
                      LogFlag = false
                    else
                      LogFlag = true
                    end if
                    call ExternalFunctions.Log(LogName, LogText, LogFlag)
                  End If
                end if
              End If
            Else
              ' фискальные чеки, отрицательное кол-во
              If (CheckInfo.CheckType <> ecr_CheckType_Text) Then
                ' продажа , отрицательное кол-во - значит, это отмена позиции
                If (CheckInfo.CheckType <> ecr_CheckType_Return) Then
                  LogText = "Отмена позиции: " & qParams.GoodName & " кол-во " & Abs(qParams.Quantity) & " цена " & qParams.Price
                  Res = Ecr.ExecuteCommand("43", GoodStr)
                  If Abs(Summ) <> Abs(SumWithD) Then
                    SumDiscount = Abs(Summ) - Abs(SumWithD)
                    if not PrintFiscalDisc(SumDiscount, PercDisc, "") then exit function
                  End If
                ' возврат, отрицательное кол-во - обычный возврат
                Else
                  LogText = "Возврат: " & qParams.GoodName & " кол-во " & Abs(qParams.Quantity) & " цена " & qParams.Price
        
                  Res = Ecr.ExecuteCommand("42", GoodStr)
                End If
        
                LogName = "Pos"
                if Res <> 0 then
                  LogText = LogText & " " &  ErrorDescription
                  LogFlag = false
                else
                  LogFlag = true
                end if
        
              ' НЕфискальные чеки
              Else
        
                LogName = "NonFiscalPos"
                LogText = "Сторно: " & qParams.GoodName & " кол-во " & Abs(qParams.Quantity) & " цена " & qParams.Price
                if not PrintLineWithMiddleSpaces("Сторно: " & qParams.GoodName, Abs(qParams.Quantity) & "x" & FormatCur(qParams.Price), 40) then
                  LogText = LogText & " " &  ErrorDescription
                  LogFlag = false
                else
                  LogFlag = true
                end if
              End If
        
              call ExternalFunctions.Log(LogName, LogText, LogFlag)
            End If ' end Quantity < 0
            Sale = GetErrorDescription(res)
          End Function
          
          ' скидка на позицию чека. Скидка по сумме
          ' SumDiscount - сумма скидки, PercDisc - % скидки (информац.)
          Private Function PrintFiscalDisc(SumDiscount, PercDisc, Descr) ': boolean
            PrintFiscalDisc = false
            dim DiscCommandCode
            if SumDiscount > 0 then
              DiscCommandCode = 45 ' скидка
            else
              DiscCommandCode = 46 ' наценка
            end if
            SumDiscount = Abs(SumDiscount)
            
            'Скидка на чек (позицию) (0x45)
            'Данная команда позволяет устанавливать процентные или абсолютные скидки на весь чек или позицию.
            ' Если данную команду применить после команды «добавление товарной позиции (0x42)»,
            ' то скидка применится только к данной позиции.
            ' Если данную команду применить после команды «Подытог (0x44)», то скидка будет применена на весь чек.
            ' Команда может быть вызвана несколько раз,
            ' при этом необходимо помнить, что итоговая сумма после применения скидки не должна быть отрицательной.
            'Входные параметры:
            '   (Целое число) Тип скидки,
            '   (Строка[0..38]) Название скидки,
            '   (Дробное число) Процент или сумма скидки.
            'Тип скидки:
            '   0- процентная скидка;
            '   1- скидка на сумму;
            'Сумма скидки, вычисляемая при процентной скидке, округляется к ближайшему целому.
            'Ответные параметры: нет.
        
            ' Наценка на чек (позицию) (0x46) - все то же, что и у скидки
            if PercDisc <> 0 then Descr = "( "& PercDisc &"% )" & " " & Descr
            dim Res
            Res = Ecr.ExecuteCommand(DiscCommandCode, _
              "1" & Splt & _
              Descr & Splt & _
               EncodeSum(SumDiscount))
        
            dim LogName, LogText, LogFlag
            LogName = "Discount"
            LogText = "Скидка: " & PercDisc & " % " & SumDiscount
            if Res <> 0 then
              LogText = LogText & " " &  ErrorDescription
              LogFlag = false
            else
              LogFlag = true
              PrintFiscalDisc = true
            end if
            call ExternalFunctions.Log(LogName, LogText, LogFlag)
          End Function
          
          ' напечатать S1.........S2
          ' MaxL =  длина строки
          Private Function PrintLineWithMiddleSpaces(S1, S2, MaxL)
            PrintLineWithMiddleSpaces = false
            dim L
            L = Len(S1) + Len(S2)
            if L > MaxL then
              if not TextLine(Left(S1, MaxL)) then exit function
              if not TextLine( String (MaxL - Len(S2), " " ) & S2) then exit function
            else
              if not TextLine(S1 & String(MaxL - L, " ") & S2 ) then exit function
            end if
        
            PrintLineWithMiddleSpaces = true
          End Function
          
        '-----Закрытие чека-------------------------------------------------------------
          ' закрыть открытый документ
          Public Function CloseDocument
            CloseDocument = false
            if NoDll then exit function
            
            '    Завершить документ (0x31)
            '    Входные параметры: (Целое число) Флаг отрезки.
            '    Если параметр “Флаг отрезки” = 1, отрезка документа по завершению не выполняется
            '      (Выполняется только для сервисных документов).
            '    Ответные параметры: (Целое число)Сквозной номер документа, (Строка) Операционный счетчик.
        
            dim Res
            Res = Ecr.ExecuteCommand("31", "0")
            If Res <> 0 Then
              ' для пречека ошибка 14 означает проблему со счетчиками ресторана
              if CheckInfo.CheckType = ecr_CheckType_Precheck and Res = 14 then
                ErrorCode = Res
                ErrorDescription = "Отрицательный результат. Возможно, счетчики заказов неактивны или сумма открытых заказов меньше, чем в сумма пречеке"
              else
                GetErrorDescription(Res)
              end if
              Exit Function
            End If
        
            CloseDocument = true
          End Function
          
          ' Оплата на указанный счетчик
          Private Function Tender(S, Counter) '; boolean
            Tender = false
            if NoDll then exit function
            
            'Оплата (0x47)
            'С помощью этой команды производится фиксирование всех взаиморасчетов с клиентом
            ' с указанием сумм и типов оплаты.
            ' При первом использовании этой команды в чеке печатается «Итоговая сумма»,
            ' что является окончательной суммой чека. После этого производить скидки на чек нельзя.
            'При передаче суммы наличными, больше требуемой,
            ' КСА самостоятельно рассчитывает сдачу.
            ' Сумма по безналичным типам платежа (с кодами от 1 до 15), не должна превышать итоговой суммы по чеку.
            'При закрытии чека с суммой оплат равной «0» (нуль)
            ' бязательно передавать код типа платежа «0» (наличные) и сумму,
            ' принятую от покупателя по данному платежу, равную «0.00» (нуль).
            ' Без команды «оплата» ФР не примет команду «завершить документ» (0х31)
            'Входные параметры:
            '    (Целое число 0..15) Код типа платежа,
            '    (Дробное число) Сумма, принятая от покупателя по данному платежу,
            '    (Строка[0..40]) Дополнительный текст.
            'Код типа платежа должен соответствовать одному из запрограммированных средств оплаты в “Таблице настроек КСА”,
            ' иначе ФР вернёт в ответе код ошибки 03h
            '(рекомендуется синхронизировать таблицу настроек перед каждым открытием смены на ФР).
            'Ответные параметры:
            '    (Строка) сумма сдачи. (передается с разделителем и 2 знаками после разделителя.
            '        На любой код типа оплаты отличный от «0» возвращается 0.
            '        На сумму меньше, чем сумма чек, возвращается 0)
        
            S = CCur(S)
        
            dim Res
            Res = Ecr.ExecuteCommand("47", _
              Counter & Splt & _
              EncodeSum(S) & Splt & "")
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
        
            Tender = true
          End Function
          
        
          ' оплатить нулевой суммой, занести в лог
          Private Function TenderNullWithLog(Name, Counter)
            TenderNullWithLog = False
            
            Dim Sum : Sum = 0
            If Not Tender(Sum, Counter) Then
              Call ExternalFunctions.Log("Sum", Name & " " & Sum & " " &  ErrorDescription, False)
              Exit Function
            Else
              Call ExternalFunctions.Log("Sum", Name & " " & Sum, True)
              TenderNullWithLog = true
            End If
          End Function
          
          ' оплатить, занести в лог
          Private Function TenderWithLog(Name, S, Counter)
            TenderWithLog = false
            If S > 0  Then
              if not Tender(S, Counter) then
                call ExternalFunctions.Log("Sum", Name & S & " " &  ErrorDescription, False)
                Exit Function
              else
                call ExternalFunctions.Log("Sum", Name & S, true)
                TenderWithLog = true
              end if
            Else
              TenderWithLog = true
            End If
          End Function
        
        
          Private Function TenderWithLogNonFiscal(Name, S)
            TenderWithLogNonFiscal = false
            if S <> 0 then
              S = CCur(S)
              if not PrintLineWithMiddleSpaces(Name, FormatCur(S), 40) then
                call ExternalFunctions.Log("NonFiscal", Name &  (S) & " " &  ErrorDescription, false)
                exit function
              else
                call ExternalFunctions.Log("NonFiscal", Name &  (S), true)
                TenderWithLogNonFiscal = true
              end if
            Else
              TenderWithLogNonFiscal = true
            End If
          End Function
        
          'Подитог
          Private Function SubClose
            SubClose = false
            'Подитог (0x44)
            'Эта команда заканчивает ввод товаров в чеке. Команда «Подитог» может даваться дважды.
            'После первой команды «Подитог» становится невозможно добавлять новые позиции в чек.
            'Далее можно установить скидки/наценки на весь чек, зарегистрировать суммы налогов,
            'распечатать произвольный текст, прервать оформление чека командами
            '«Отложить чек» и «Аннулировать чек»
            'или продолжить оформление с использованием повторной команды «Подитог» или команды «Оплата».
            'После повторной команды «Подитог», документ переходит в состояние оплаты.
            'Далее мы можем распечатать произвольный текст, прервать оформление чека командами «Отложить чек» и «Аннулировать чек», либо продолжить оформление документа, выполнив команду «Оплата» и команду «Завершить документ».
            'Входные параметры: нет.
            'Ответные параметры: нет.
        
            dim Res
            Res = Ecr.ExecuteCommand("44","")
            if Res <> 0 then
              call ExternalFunctions.Log("CloseCheck", "Невозможно добавить подитог: " &  ErrorDescription, False)
              Exit Function
            end if
            SubClose = true
          End Function
          
          ' Печать раздела AddInfo в низу чека (пока что не поддерживается)
          Private Sub PrintFooter
            if CheckInfo.AddInfoEmployee <> "" then
              call PrintFooterPart(CheckInfo.AddInfoEmployee, Styles.ValueFonts.AddInfoEmployee)
            end if
            if CheckInfo.AddInfoCard <> "" then
              call PrintFooterPart(CheckInfo.AddInfoCard, Styles.ValueFonts.AddInfoCard)
            end if
            if CheckInfo.AddInfoOther <> "" then
              call PrintFooterPart(CheckInfo.AddInfoOther, Styles.ValueFonts.AddInfoOther)
            end if
          End Sub
          
          ' печать одного реквизита из AddInfo
          Private Sub PrintFooterPart(S, Font)
            ' в реквизите может быть несколько строк, разделенных переводом строки
            dim Arr
            Arr = Split(S, VBCR)
            if UBound(Arr) < 0 then exit sub
            
            dim FontCode
            ' собрать флаги шрифта в число
            FontCode = GetFontFlagsByFontObject(Font)
            
            dim i
            for i = 0 to UBound(Arr)
              call TextLineFlags (Arr(i), FontCode)
            next
          End Sub
          
          ' печатать дескрипторы AddInfo в конце чека
          Private Sub PrintFooterAddInfo
              ' доп инф состоит из 3х блоков
            dim AddInfo
            AddInfo = ""
            if CheckInfo.AddInfoEmployee <> "" then
              if AddInfo <> "" then AddInfo = AddInfo & VBCR
              if Styles.DescriptorNames.AddInfoEmployee <> "" then AddInfo = AddInfo & Styles.DescriptorNames.AddInfoEmployee & ": "
              AddInfo = AddInfo & CheckInfo.AddInfoEmployee
            end if
            if CheckInfo.AddInfoCard <> "" then
              if AddInfo <> "" then AddInfo = AddInfo & VBCR
              if Styles.DescriptorNames.AddInfoCard <> "" then AddInfo = AddInfo & Styles.DescriptorNames.AddInfoCard & ": "
              AddInfo = AddInfo & CheckInfo.AddInfoCard
            end if
            if CheckInfo.AddInfoOther <> "" then
              if AddInfo <> "" then AddInfo = AddInfo & VBCR
              if Styles.DescriptorNames.AddInfoOther <> "" then AddInfo = AddInfo & Styles.DescriptorNames.AddInfoOther & ": "
              AddInfo = AddInfo & CheckInfo.AddInfoOther
            end if
        
            'поле с доп информацией - дескриптор без имени № 0
            call PrintDescriptor(AddInfo, 0, Styles.ValueFonts.AddInfoOther)
          End Sub
          ' qParams - TVB_FR_CheckSums
          ' внести оплаты, закрыть чек
          Public Function CloseCheck(qParams)
            dim SumDiscount, SumCheck, SumNal
            dim SumCard, SumAdvance, SumCertificate
            dim SumBN, SumCredit, SumBonus, SumOplati, SumExtraFood
            dim DiscDescription
        
            ' на какие счетчики идут Суммы:
            ' SumCard - 1
            ' SumBN - 2
            ' SumAdvance - 3
            ' SumCertificate - 4
            ' SumCredit - 5
            ' SumBonus - 6
            ' SumExtraFood - 7
            ' SumNal - 0
        
        
            CloseCheck = False
            if NoDll then exit function
        
            SumCard         = ABS(qParams.SumCard)
            SumNal          = ABS(qParams.SumNal)
            SumBN           = ABS(qParams.SumBN)
            SumCredit       = ABS(qParams.SumCredit)
            SumBonus        = ABS(qParams.SumBonus)
            SumOplati       = ABS(qParams.SumOplati)
            SumExtraFood    = ABS(qParams.SumExtraFood)
            SumAdvance      = ABS(qParams.SumAdvance)
            SumCertificate  = ABS(qParams.SumCertificate)
            SumDiscount     = (qParams.SumDiscount)
            DiscDescription = qParams.DiscDescription
        
            ' фискальные чеки
            If CheckInfo.CheckType <> ecr_CheckType_Text Then
        
              'Подитог
              if not SubClose then exit function
              
              ' скидка
              If qParams.UseAbsoluteDiscount and SumDiscount <> 0 Then
                if not PrintFiscalDisc(SumDiscount, 0, "") then exit function
              End If
        
              ' учитывать аванс как скидку
              if DeviceOptions.UseAdvanceAsDiscount and SumAdvance > 0 then
                if not PrintFiscalDisc(SumAdvance, 0, "(Аванс)") then
                  call ExternalFunctions.Log("Sum", "Аванс: " & SumAdvance & " " &  ErrorDescription, False)
                  Exit Function
                else
                  call ExternalFunctions.Log("Sum", "Аванс: " & SumAdvance, true)
                end if
        
                SumAdvance = CCur(0)
              end if
              
              'Подитог
              if not SubClose then exit function
              
              ' ОПЛАТЫ (на разные счетчики)
              ' карточка
              if not TenderWithLog("Сумма по карте: ", SumCard, 1) then exit function
              ' безнал
              if not TenderWithLog("Сумма по безналу: ", SumBN, 2) then exit function
              ' аванс
              if not TenderWithLog("Сумма аванса: ", SumAdvance, 3) then exit function
              ' сертификат
              if not TenderWithLog("Сумма по сертификату: ", SumCertificate, 4) then exit function
              ' кредит
              if not TenderWithLog("Сумма по кредиту: ", SumCredit, 5) then exit function
              ' бонус
              if not TenderWithLog("Бонус: ", SumBonus, 6) then exit function
              ' о!плати
              if not TenderWithLog("О!плати: ", SumOplati, 8) then exit function
              ' спецпитание
              if not TenderWithLog("Спецпитание: ", SumExtraFood, 7) then exit function
              ' наличные
              if not TenderWithLog("Наличные: ", SumNal, 0) then exit function
        
        
              ' если все суммы нулевые, закрываем чек нулевой суммой на безнал
              If SumCard = 0 And _
                 SumBN = 0 And _
                 SumNal = 0 And _
                 SumAdvance = 0 And _
                 SumCertificate = 0 And _
                 SumCredit = 0 And _
                 SumBonus = 0 And _
                 SumOplati = 0 And _
                 SumExtraFood = 0 Then
                ' безнал
                if not TenderNullWithLog("Сумма наличных: ", 0) then exit function
              End If
        
            Else ' печать нефискальной копии чека
        
              if DeviceOptions.UseAdvanceAsDiscount then
                if not TenderWithLogNonFiscal("Аванс: ", SumAdvance) then exit function
                SumAdvance = 0
              end if
        
              Dim ItogText
              If SumCheck >= 0 Then
                ItogText = "ИТОГ по чеку продажи "
              Else
                ItogText = "ИТОГ по чеку возврата "
              End If
        
        
              SumCheck = ABS(qParams.SumCheck)
        
              call TextLine(String(40, "-"))
        
              if not PrintLineWithMiddleSpaces(ItogText, FormatCur(SumCheck), 40) then
                call ExternalFunctions.Log("NonFiscal", ItogText & SumCheck & " " &  ErrorDescription, false)
                exit function
              else
                call ExternalFunctions.Log("NonFiscal", ItogText & SumCheck, true)
              end if
        
        
              ' ОПЛАТЫ
              ' карточка
              if not TenderWithLogNonFiscal("Карта: ", SumCard) then exit function
              ' безнал
              if not TenderWithLogNonFiscal("Б/н: ", SumBN) then exit function
              ' аванс
              if not TenderWithLogNonFiscal("Аванс: ", SumAdvance) then exit function
              ' сертификат
              if not TenderWithLogNonFiscal("Сертификат: ", SumCertificate) then exit function
              ' кредит
              if not TenderWithLogNonFiscal("Кредит: ", SumCredit) then exit function
              ' бонус
              if not TenderWithLogNonFiscal("Бонусы: ", SumBonus) then exit function
              ' о!плати
              if not TenderWithLogNonFiscal("О!плати: ", SumOplati) then exit function
              ' спецпитание
              if not TenderWithLogNonFiscal("Спецпитание: ", SumExtraFood) then exit function
              ' наличные
              if not TenderWithLogNonFiscal("Наличные: ", SumNal) then exit function
        
        
              dim SumRest
              SumRest = SumCard + SumBN + SumNal + SumAdvance + SumBonus + SumCertificate + SumExtraFood + SumCredit + SumOplati
              If SumRest > SumCheck Then
                if not TextLine("Сдача " &  CCur(SumRest)) then
                  call ExternalFunctions.Log("NonFiscal", "Сдача " &  CCur(SumRest) & " " &  ErrorDescription, false)
                  exit function
                else
                  call ExternalFunctions.Log("NonFiscal", "Сдача " &  CCur(SumRest), true)
                end if
              End If
            End If
        
        
            ' запись в лог
            dim LogFlag, LogName, LogText
            select case CheckInfo.CheckType
              case ecr_CheckType_Sell
                LogName = "CloseCheck"
                LogText = "Чек продажи "
              case ecr_CheckType_Return
                LogName = "CloseCheck"
                LogText = "Чек возврата "
              case ecr_CheckType_Text
                LogName = "NonFiscalClose"
                LogText = "Нефискальный чек "
              case ecr_CheckType_Annul
                LogName = "CloseCheckAnnul"
                LogText = "Чек аннулирования "
            end select
            
            call PrintFooterAddInfo
            
            if not CloseDocument then
              LogFlag = False
              LogText = LogText & "не закрыт: " & ErrorDescription
            else
              LogFlag = False
              LogText = LogText & "закрыт"
              CloseCheck = true
            end if
            call ExternalFunctions.Log(LogName, LogText, LogFlag)
        
            if not CheckDeviceInfo then
              call ExternalFunctions.Log("CheckDeviceInfo", ErrorDescription, false)
            end if
          End Function
          
          
        ' -------Аннулирование чека-----------------------------------------------------
          ' oSums - TVB_FR_CheckSums
          ' предварительно во внешней ф-и заполняется CheckInfo
        
          Public Function AnnulCheck (oSums)
        
        
            call ExternalFunctions.Log("OpenCheckAnnul", _
              "Аннулирование чека №" & CheckInfo.DocumentNumber & " на сумму " & oSums.SumCheck , True)
            ' на какие счетчики идут Суммы:
            ' SumCard - 1
            ' SumBN - 2
            ' SumAdvance - 3
            ' SumCertificate - 4
            ' SumCredit - 5
            ' SumBonus - 6
            ' SumExtraFood - 7
            ' SumNal - 0
        
            dim Pays(15), i
            for i = 0 to 15
              Pays(i) = 0
            next
            Pays(0) = EncodeSum(ABS(oSums.SumNal))
            Pays(1) = EncodeSum(ABS(oSums.SumCard))
            Pays(2) = EncodeSum(ABS(oSums.SumBN))
            ' НЕ учитывать аванс как скидку
            if not DeviceOptions.UseAdvanceAsDiscount then
              Pays(3) = EncodeSum(ABS(oSums.SumAdvance))
            end if
            Pays(4) = EncodeSum(ABS(oSums.SumCertificate))
            Pays(5) = EncodeSum(ABS(oSums.SumCredit))
            Pays(6) = EncodeSum(ABS(oSums.SumBonus))
            Pays(7) = EncodeSum(ABS(oSums.SumExtraFood))
            Pays(8) = EncodeSum(ABS(oSums.SumOplati))
        
        
            dim PaysStr
            PaysStr = Join(Pays, Splt)
        
            'Аннулировать документ (0x35)
            'Суммы типов оплат необходимо передавать по порядку,
            'указанному в запрограммированных средствах оплаты в “Таблице настроек КСА”.
            'Параметров передаваемых сумм должно быть 16.
            'Если в данном типе нет суммы — необходимо передавать «0».
            'Входные параметры:
            '   (Целое число)Номер аннулируемого документа,
            '   (Дробное число) Сумма типа оплаты №1,
            '   (Дробное число) Сумма типа оплаты №2,
            '   (Дробное число) Сумма типа оплаты №3,
            '   (Дробное число) Сумма типа оплаты №4,
            '   (Дробное число) Сумма типа оплаты №5,
            '   (Дробное число) Сумма типа оплаты №6,
            '   (Дробное число) Сумма типа оплаты №7,
            '   (Дробное число) Сумма типа оплаты №8,
            '   (Дробное число) Сумма типа оплаты №9,
            '   (Дробное число) Сумма типа оплаты №10,
            '   (Дробное число) Сумма типа оплаты №11,
            '   (Дробное число) Сумма типа оплаты №12,
            '   (Дробное число) Сумма типа оплаты №13,
            '   (Дробное число) Сумма типа оплаты №14,
            '   (Дробное число) Сумма типа оплаты №15,
            '   (Дробное число) Сумма типа оплаты №16,
            '   (Имя оператора)Код и/или имя оператора,
            '   (Дробное число)(необ) сумма скидки по документу,
            '   (Дробное число) сумма надбавки (необ).
            'Ответные параметры: нет.
        
            dim Res
            Res = Ecr.ExecuteCommand("35", _
               CheckInfo.AnnulCheck & Splt & _
               PaysStr & Splt & _
               SessionInfo.UserName & Splt & _
               "0" & Splt & "0")
        
            ' запись в лог
            dim LogFlag, LogName, LogText
        
            LogName = "CloseCheckAnnul"
            LogText = "Чек аннулирования "
        
            AnnulCheck = GetErrorDescription(res)
        
            if Res <> 0 then
              LogFlag = False
              LogText = LogText & "не закрыт: " & ErrorDescription
            else
              LogFlag = False
              LogText = LogText & "закрыт"
            end if
            call ExternalFunctions.Log(LogName, LogText, LogFlag)
          End Function
        
          ' копирование чека.
          ' Где-то достаточно знать номер,
          ' а где-то надо выводить копию как текстовый документ
        
        
          'Копия последнего чека(нефискальная) не поддерживается
          Public Function CopyLastCheck
            dim Num
            ' номер последнего док-та
            Num = GetDocumentNumber
            if Num <= 0 then exit function
            CopyLastCheck = CopyCheck(Num)
        
          End Function
        
          ' копирование по номеру
          Public Function CopyCheck(Num)
            CopyCheck = false
            ClearError
            
            if NoDll then exit function
            if not FIsInit then exit function
            
            'Копия чека (0x70)
            'Эта команда позволяет распечатать копию документа.
            'Входные параметры:
            '   (Целое число) Сквозной номер документа
            'Ответные параметры: нет.
            'Если документа c таким номером не найдено,
            '  возвращается ошибка “0x48 - Нет запрошенных данных”. Максимальное время ожидания ответа – 9 сек.
        
            dim Res
            Res = Ecr.ExecuteCommand("70", Num)
            
            CopyCheck = GetErrorDescription(Res)
            
            ' запись в лог
            dim LogFlag, LogName, LogText
            LogName = "NonFiscalClose"
            LogText = "Копия чека "
        
            if Res <> 0 then
              LogFlag = False
              LogText = LogText & "не распечатана: " & ErrorDescription
            else
              LogFlag = False
              LogText = LogText & "распечатана"
            end if
            call ExternalFunctions.Log(LogName, LogText, LogFlag)
        
            if not CheckDeviceInfo then
              call ExternalFunctions.Log("CheckDeviceInfo", ErrorDescription, false)
            end if
        
          End Function
          
        '###############################################################################
        'печатать чек полностью на основе CheckInfo
        '###############################################################################
          ' Эта ф-я нужна потому, что не всегда набор OpenCheck, CloseCheck, Sale можно однозначно применить
          ' во внешнем классе. Например, аннулирование.
          ' Где-то его можно сделать по номеру чека, не задавая позиции и итоги,
          ' а где-то (в Спарке) - нужно указывать итоги.
          Public Function PrintCheck
            PrintCheck = false
            ClearError
        
            if NoDll then exit function
            if not FIsInit then exit function
        
            ' аннулирование ведется по особому алгоритму
            if CheckInfo.CheckType = ecr_CheckType_Annul then
              PrintCheck = AnnulCheck(CheckInfo.Sums)
              exit function
            end if
        
            ' продажа
            ' возврат
            ' нефискальная копия
            ' пречек
            dim MaxCounter
            MaxCounter = CheckInfo.LinesCount
            ' для возврата возможно только одна позиция
            if CheckInfo.CheckType = ecr_CheckType_Return then
              if MaxCounter > 1 then
                ErrorCode = - 2
                ErrorDescription = "В чеке возврата не может быть несколько позиций!"
                exit function
              end if
            end if
            
        
            ' напечатать шапку и открыть чек
            if not OpenCheck then exit function
        
            ' позиции чека
            dim i, oLine
        
            ' позиции находятся в объекте CheckInfo.Line
            for i = 0 to MaxCounter - 1
              set oLine = CheckInfo.Line(i)
              if Assigned(oLine) then
                if not Sale(oLine) then exit function
              end if
            next
        
            ' пречек не закрывается итоговыми суммами
            if CheckInfo.CheckType = ecr_CheckType_Precheck then
              'Подитог
              if not SubClose then exit function
              
              ' аванс нельзя распечатать в пречеке как позицию, поэтому печатаем как скидку
              if CheckInfo.Sums.SumAdvance > 0 then
                call PrintFiscalDisc(CheckInfo.Sums.SumAdvance, 0, "(Аванс)")
              end if
              PrintCheck = CloseDocument
            else
              PrintCheck = CloseCheck(CheckInfo.Sums)
            end if
        
          End Function
        
        
          ' печать пречека полностью на основе CheckInfo
          Public Function PrintPreCheck
            if CheckInfo.CheckType = ecr_CheckType_Precheck then
              PrintPreCheck = PrintCheck
            else
              PrintPreCheck = false
              ErrorCode = - 2
              ErrorDescription = "Печать пречека невозможно. Внесен другой тип чека."
            end if
          End Function
          
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        'Итоги смены, суммы, количества @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        
          'контроль кол-ва распечатанных чеков
        
          ' кол-во распечатанных чеков (всего)
          Public Property Get CurrentCountChecks ': integer
            CurrentCountChecks = -1
            if NoDll then exit property
            
            'Запрос сменных счетчиков и регистров (0x01)
            'Эта команда позволяет получать различные значения сменных счетчиков и регистров КСА.
            'Входные параметры: (Целое число 1..15) Номер запроса.
            'Ответные параметры: (Целое число) Номер запроса, Возвращаемые данные.
            'Тип и количество возвращаемых данных зависит от значения номера запроса.
            ' Номер запроса = 7 Вернуть количество оформленных чеков по типам операций
            ' Возвращается 6 значений – количество чеков
            ' продажи, возврата, аннулированных, отменённых, чеков внесения и изъятия.
            dim Res
            Res = Ecr.ExecuteCommand("01", "7")
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Property
            End If
        
            ' в ResultString записываются выходные параметры, разделенные Chr(27)
            ' Arr(0) - 7 (Номер запроса)
            ' Arr(1-6) - количество чеков
            '    продажи, возврата, аннулированных, отменённых, чеков внесения и изъятия.
            dim Arr
            Arr = Split(Ecr.ResultString, Splt)
            ' проверить на корректность массив, созданный на основании Ecr.ResultString
            if not CheckOutputFormat(Arr, 6) then exit property
            
            dim i, Counter
            Counter = 0
            for i = 1 to 6
              if IsNumeric(Arr(i)) then
                Arr(i) = CLng(Arr(i))
              else
                Arr(i) = 0
              end if
              Counter = Counter + Arr(i)
            next
            CurrentCountChecks = Counter
          End Property
        
          ' запомнить в переменную кол-во чеков
          ' делается при открытии документа, чтобы убедиться в конце, что он распечатан
          Private FCountChecksBeforePrint
          Public Function SetCountChecksBeforePrint  ': integer
            FCountChecksBeforePrint = CurrentCountChecks
          End Function
        
          Public Property Get CountChecksBeforePrint  ': integer
            CountChecksBeforePrint = FCountChecksBeforePrint
          End Property
        
          ' Общий счетчик документов
          Public Property Get GetDocumentNumber  ': integer
            GetDocumentNumber = 0
            if not FIsInit then exit property
        
            if NoDll then exit property
            
            'Запрос данных по чеку (0x03)
            'Эта команда позволяет получать данные по чеку. Тип и количество возвращаемых данных
            'зависит от значения передаваемого параметра – номер запроса.
            'Входные параметры: (Целое число 1..2) Номер запроса.
            'Ответные параметры: (Целое число) Номер запроса, Возвращаемые данные.
        
            dim Res, Arr
            Res = Ecr.ExecuteCommand("03", "2")
            If Res <> 0 Then
              GetErrorDescription(Res)
              exit property
            End If
            Arr = Split(Ecr.ResultString, Splt)
            ' проверить на корректность массив, созданный на основании Ecr.ResultString
            if not CheckOutputFormat(Arr, 8) then exit property
            
            'Возвращается 9 значений –
            '  тип чека (для отменненых= 0),
            '  текущий операц. счетчик,
            '  номер чека,
            '  номер документа,
            '  сквозной номер
            '  сумма чека,
            '  сумма скидки по чеку,
            '  сумма наценки по чеку,
            '  уникальный идентификатор
            '    документа (от СКНО)
        
        
            if IsNumeric(Arr(4)) then
              GetDocumentNumber = CLng(Arr(4))
            end if
          End Property
        
          Private FSumItog      ' итог продаж за смену (сумма)
          Public Property Get SumItog
            'Реализация за смену
            SumItog = 0
            If NoDll Then Exit Property
        
            ' FSumItog заполняется в ф-и GetSumItog
            SumItog = FSumItog
          End Property
        
          Private FSelQuantItog ' итог продаж за смену (кол-во)
          
          
          'Записать итоги в qItog( TVB_FR_EndSessionInfo)
          'IsReturn - итоги по возвратам (иначе по продажам)
        
          Private Function ReadItogs(qItog, IsReturn) ': boolean
            ReadItogs = false
            
            dim TypeCode
            if not IsReturn then
              TypeCode = 3
            else
              TypeCode = 5
            end if
            
           'Запрос сменных счетчиков и регистров (0x01)
            'Эта команда позволяет получать различные значения сменных счетчиков и регистров КСА.
            'Входные параметры: (Целое число 1..15) Номер запроса.
            'Ответные параметры: (Целое число) Номер запроса, Возвращаемые данные.
            'Тип и количество возвращаемых данных зависит от значения номера запроса.
            ' Номер запроса = 3 - Вернуть суммы продаж по типам платежа
            ' Номер запроса = 5 - Вернуть суммы возвратов по типам платежа
            dim Res
            Res = Ecr.ExecuteCommand("01", TypeCode)
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
        
            ' в ResultString записываются выходные параметры, разделенные Chr(27)
            ' Arr(0) - 2\5 (Номер запроса)
            ' Arr(1-16) - суммы по типам оплат
            dim Arr
            Arr = Split(Ecr.ResultString, Splt)
            ' проверить на корректность массив, созданный на основании Ecr.ResultString
            if not CheckOutputFormat(Arr, 16) then exit Function
        
            dim i
            for i = 1 to 16
              Arr(i) = DecodeSum(Arr(i))
              if IsReturn then Arr(i) = -Arr(i)
              qItog.SumItog  = qItog.SumItog + Arr(i)
            next
            qItog.Sums.SumNal = qItog.Sums.SumNal + Arr(1)
            qItog.Sums.SumCard = qItog.Sums.SumCard + Arr(2)
            qItog.Sums.SumBN = qItog.Sums.SumBN + Arr(3)
            qItog.Sums.SumAdvance = qItog.Sums.SumAdvance + Arr(4)
            qItog.Sums.SumCertificate = qItog.Sums.SumCertificate + Arr(5)
            qItog.Sums.SumCredit = qItog.Sums.SumCredit + Arr(6)
            qItog.Sums.SumBonus = qItog.Sums.SumBonus + Arr(7)
            qItog.Sums.SumExtraFood = qItog.Sums.SumExtraFood + Arr(8)
            qItog.Sums.SumOplati = qItog.Sums.SumOplati + Arr(9)
            
            ReadItogs = true
          End Function
        
          ' запомнить итоги смены перед построением Z1, тк после закрытия смены они обнулятся
          Private Function GetSumItog ' : boolean
            GetSumItog = False
            If NoDll Then Exit Function
            
            ' данные по видам оплат
            dim qItog
            set qItog = new TVB_FR_EndSessionInfo
            qItog.ShiftNumber = ShiftNumber
            if not ReadItogs(qItog, false) then exit function
            if not ReadItogs(qItog, true) then exit function
        
            FSumItog = qItog.SumItog
            ' FSelQuantItog = .....
            
            ' занести данные об итогах смены в базу
            call ExternalFunctions.EndSessionInfo(qItog)
            GetSumItog = True
          End Function
          
        
        
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        ' внесение, изъятие @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
          ' внесение, изъятие
          ' Summ1: currency - какую сумму внести
          ' IsOut: boolean. Если истина, то изъятие, иначе внесение
          Private Function Money(Summ1, IsOut) ': boolean
            Money = False
            If Not Init Then Exit Function
            
            dim TypeCode, LogName, LogCaption
            if IsOut then
              TypeCode = 5
              LogName = "MoneyOutOpen"
              LogCaption = "изъятия"
            else
              TypeCode = 4
              LogName = "MoneyInOpen"
              LogCaption = "внесения"
            end if
            
            '    Открыть документ (0x30)
            '    Эта команда открывает новый документ и переводит КСА в режим ввода документа.
            '    После успешного выполнения этой команды во внутренней переменной «статуса документа»
            '    устанавливается соответствующий тип текущего документа.
            '    Этот статус можно получить по команде “Запрос флагов статуса КСА”.
            '    Входные параметры:
            '      (Целое число)Режим и тип документа,
            '      (Целое число1..99)Номер отдела,
            '      (Имя оператора)Код и/или имя оператора,
            '      (Целое число)Номер документа
            '    Режим и тип документа - число, в котором зашит тип и доп флаги.
            '      Доп флаги = 0, поэтому в нашем случае все число равно типу док-та (4 для внесения, 5 для изъятия)
        
            dim Res
            Res = Ecr.ExecuteCommand("30", TypeCode & Splt & 1 & Splt & SessionInfo.UserName & Splt & 0)
            If Res <> 0 Then
              GetErrorDescription(Res)
              call ExternalFunctions.Log(LogName, ErrorDescription, False)
              Exit Function
            Else
              call ExternalFunctions.Log(LogName, "Чек " & LogCaption & " денег открыт", True)
            End If
        
            '    Внесение / выдача суммы (0x48)
            '    Команда регистрирует внесение или выдача суммы денег из денежного ящика.
            '    Команда выполняется после команды “Открыть документ”. Если производится внесение денег, тип документа должен быть 4, если выдача - 5.
            '    При этом может быть напечатана информация о купюрах, которые были использованы при выполнении данной операции.
            '    Входные параметры: (Строка[0..40]) Название или тип купюры, (Дробное число) Сумма.
            '    Ответные параметры: нет.
        
            Res = Ecr.ExecuteCommand("48", "" & Splt & FormatSum(Summ1))
            If Res <> 0 Then
              call ExternalFunctions.Log("Sum", ErrorDescription, False)
              Exit Function
            Else
              call ExternalFunctions.Log("Sum", "Наличные деньги", True)
            End If
            
            If not CloseDocument Then
              GetErrorDescription(Res)
              call ExternalFunctions.Log("CloseCheck", ErrorDescription, False)
              Exit Function
            Else
              call ExternalFunctions.Log("CloseCheck", "Чек " & LogCaption & " денег закрыт. Сумма: " & Summ1, True)
              Money = True
            End If
            
          End Function
        
          ' Внесение денег в кассу
          ' Summ1: currency - какую сумму внести
          Public Function MoneyIn(Summ1) ': boolean
            MoneyIn = Money(Summ1, false)
          End Function
        
          ' изъятие из кассы
          ' Summ1: currency - какую сумму изъять
          Public Function MoneyOut(Summ1) ': boolean
            MoneyOut = Money(Summ1, true)
          End Function
          
          
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        'Отчёты @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        
          ' Z1
          Public Function PrintReportWithCleaning ': boolean
        
            PrintReportWithCleaning = False
            if NoDll then exit function
        
            ' Устанавливаем флажок FZ1InPrint (идет печать сменного отчета).
            ' В общем случае Init возвращает ложь, если лимит смены, но если установлен FZ1InPrint,
            ' она пропускает проверку на превышение смены
            FZ1InPrint = True
            If Not Init Then Exit Function
            FZ1InPrint = False
        
            ' получить данные по продажам и оплатам за смену (после закрытия смены обнулятся)
            If Not GetSumItog Then Exit Function
        
            'Распечатать отчет с гашением (Z-отчет) (0x21)
            'Входные параметры: (Имя оператора) Код и/или имя оператора
            'Ответные параметры: нет.
            dim Res
            Res = Ecr.ExecuteCommand("21", SessionInfo.UserName )
        
            If Res <> 0 Then
              GetErrorDescription(Res)
              call ExternalFunctions.Log("Z1", ErrorDescription, False)
              Exit Function
            Else
              call ExternalFunctions.Log("Z1", "Отчёт распечатан", True)
              PrintReportWithCleaning = True
              FIsInit = false
            End If
          End Function
        
          ' X1
          Public Function PrintReportWithOutCleaning ': boolean
            PrintReportWithOutCleaning = False
            if NoDll then exit function
        
            '    Распечатать отчет без гашения (X-отчет) (0x20)
            '    Входные параметры: (Имя оператора) Код и/или имя оператора
            '    Ответные параметры: нет.
            dim Res
            Res = Ecr.ExecuteCommand("20", SessionInfo.UserName )
            If Res <> 0 Then
              GetErrorDescription(Res)
              call ExternalFunctions.Log("X1", ErrorDescription, False)
              Exit Function
            Else
              call ExternalFunctions.Log("X1", "Отчёт распечатан", True)
        
              If DeviceOptions.PrintCopyX1Report Then
                Res = Ecr.ExecuteCommand("20", SessionInfo.UserName )
                If Res = 0 Then
                  call ExternalFunctions.Log("X1", "Копия отчета распечатана", True)
                Else
                  GetErrorDescription(Res)
                  call ExternalFunctions.Log("X1", "Копия отчета не распечатана: " & ErrorDescription, False)
                End If
              End If
              PrintReportWithOutCleaning = True
            End If
        
          End Function
          
          'состояние СКНО
          Public Function SKNO
            SKNO = False
            if NoDll then exit function
        
            'Распечатать сервисные данные СКНО (0x96)
            'Эта команда печатает на чеке данные по текущему состоянию СКНО.
            'Входные параметры: нет.
            'Ответные параметры: нет.
            dim Res
            Res = Ecr.ExecuteCommand("96", "")
            If Res <> 0 Then
              GetErrorDescription(Res)
              call ExternalFunctions.Log("SKNO", ErrorDescription, False)
              Exit Function
            Else
              call ExternalFunctions.Log("SKNO", "Отчёт распечатан", True)
              SKNO = True
            End If
        
            SKNO = True
          End Function
        
          
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        ' буффер контрольной ленты @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        
          ' проверка, что весь буффер контрольной ленты распечатан
          Public Function IsControlReportPrinted
            IsControlReportPrinted = False
            ' не поддерживается
          End Function
        
          ' печать буффера контрольной ленты
          Public Function PrintReportControlReport
            PrintReportControlReport = False
        
            If NoDll Then Exit Function
            If Not Init Then Exit Function
            
            'Распечатать буфер контрольной ленты(0x22)
            'Входные параметры: нет.
            'Ответные параметры: нет
        
            ' печать ленты
            dim Res
            Res = Ecr.ExecuteCommand("22", "" )
            If Res = 0 Then
              call ExternalFunctions.Log("ControlTape", "Контрольная лента распечатана", True)
              PrintReportControlReport = True
            Else
              GetErrorDescription(Res)
              call ExternalFunctions.Log("ControlTape", "Контрольная лента не распечатана: " & ErrorDescription, False)
            End If
          End Function
          
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        ' КОМАНДЫ ФР @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
          ' Тест печати
          Public Function TestPrint ': boolean
        
            TestPrint = False
            ClearError
        
            ' инициализация. Даже если Init вернет ошибку, можем продолжать
            if NoDll then exit function
            Init
        
            if not FSilentMode then
              if ExternalFunctions.MessageBox("Вы действительно хотите протестировать принтер?", _
                vbYesNo) = vbNo then exit function
            End If
            
            'Распечатать сервисные данные (0x94)
            'Эта команда печатает на чеке данные по текущим настройкам, состоянию и дополнительной сервисной информации.
            'Входные параметры: нет.
            'Ответные параметры: нет.
        
            dim Res
            Res = Ecr.ExecuteCommand("94", "" )
            TestPrint = GetErrorDescription(res)
          End Function
        
          ' Открыть денежный ящик
          Public Function OpenDrawer
            OpenDrawer = False
            If Not Init Then Exit Function
            
            'Получить статус денежного ящика (0x81)
            'Входные параметры: нет.
            'Ответные параметры: (Целое число) Статус: 0-закрыт;1-открыт.
            dim Res
            
            Res = Ecr.ExecuteCommand("81", "")
            If Res <> 0 Then
              GetErrorDescription(Res)
              call ExternalFunctions.Log("OpenDrawer", ErrorDescription, False)
              Exit Function
            End If
        
            dim Arr
            Arr = Split(Ecr.ResultString, Splt)
            ' проверить на корректность массив, созданный на основании Ecr.ResultString
            if not CheckOutputFormat(Arr, 0) then
              call ExternalFunctions.Log("OpenDrawer", ErrorDescription, False)
              exit function
            end if
            
            ' если закрыт
            if Arr(0) = "0" then
              'Открыть денежный ящик (0x80)
              'С помощью этой команды можно открыть денежный ящик, подключенный к КСА.
              'Входные параметры: нет.
              'Ответные параметры: нет.
        
              Res = Ecr.ExecuteCommand("80", "")
              If Res <> 0 Then
                GetErrorDescription(Res)
                call ExternalFunctions.Log("OpenDrawer", ErrorDescription, False)
              Else
                call ExternalFunctions.Log("OpenDrawer",  "Денежный ящик открыт", True)
                OpenDrawer = True
              End If
            end if
          End Function
          
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        ' Регистрация операций ресторана @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        
          ' имя операции по коду
          Private Function RestaurantOrderOperationName(Code)
            select case Code
              case 1
                RestaurantOrderOperationName = "Оформление заказа"
              case 2
                RestaurantOrderOperationName = "Отмена заказа"
              case 3
                RestaurantOrderOperationName = "Коррекция заказа"
              case 4
                RestaurantOrderOperationName = "Закрытие заказа"
              case else
                RestaurantOrderOperationName = "КОД " & CStr(Code)
            end select
          End Function
          
          ' Регистрация операций ресторана на ФР
          Public Function RegisterRestaurantOrderOperation(oOper)
            '    oOper.OrderType:
            '    1 - Оформление заказа
            '    2 - Отмена заказа
            '    3 - Коррекция заказа
            '    4 - Закрытие заказа
            '    5 - Дозаказ. У пирита дозаказа нет, делаем вместо него оформление заказа
            RegisterRestaurantOrderOperation = False
            If Not Init Then Exit Function
        
            if not DeviceOptions.RegisterRestaurantOperations then exit function
            
            '    5 - Дозаказ. У пирита дозаказа нет, делаем вместо него оформление заказа
            If oOper.OrderType = 5 Then oOper.OrderType = 1
            if oOper.OrderType < 1 or oOper.OrderType > 4 then exit function
        
            dim OT, UN
            UN = ""
            select case oOper.OrderType
              case 1
                OT = 1
              case 2
                OT = 3
              case 3
                OT = 4
              case 4
                OT = 2
                UN = Splt & SessionInfo.UserName
            end select
            'Работа с заказами (0х36)
            'Входные параметры:
            '      (Целое число 1..4)Тип операции,
            '      (Целое число) (необ)Количество,
            '      (Дробное число) (необ) Сумма,
            '      (Строка)Имя\номер оператора (только для типа операции-4)
            dim Res
            Res = Ecr.ExecuteCommand("36", OT & Splt & EncodeSum(oOper.Quantity) & Splt & EncodeSum(oOper.OrderSum) & UN)
            If res <> 0 Then
              call ExternalFunctions.Log("Error", _
                 RestaurantOrderOperationName(oOper.OrderType) & " кол-во: " & oOper.Quantity  & " сумма: " & oOper.OrderSum & ErrorDescription, False)
              GetErrorDescription(Res)
              Exit Function
            End If
            RegisterRestaurantOrderOperation = True
          End Function
        
          ' активированы ли специальные счетчики для ресторана
          Public Property Get IsRestaurantMode
            IsRestaurantMode = true
          End Property
          
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        ' ЭКЛЗ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
          'Данные по документу обычно возвращаются блоками текста.
          'Эти блоки, в зависимости от ФР, можно вохвращать от начала к концу док-та (например, ФР Пирит),
          'или от конца к началу (Спарк)
          'Свойство означает, в каком порядке возвращаются блоки. Если истина, то от конца к началу
          Public Property Get EKLZInfoDescending
            EKLZInfoDescending = false
          End Property
        
          ' данные по номеру документа
          ' Num - номер документа
          ' qLinesArr - массив из TVB_FR_EKLZLine, в который ф-я добавляет элементы
          Public Function EKLZDocument(Num, qLinesArr)
            EKLZDocument = false
            ClearError
        
            if NoDll then exit function
            if not IsInit then exit function
        
            if Num <= 0 then exit function
            if not IsArray(qLinesArr) then exit function
            
            'Получить на ПК документы из КЛ (0x71)
            'Эта команда позволяет найти и получить на ПК документ из КЛ, по сквозному номеру документа.
            'Входные параметры:
            '   (Целое число)Номер документа,
            '   (Целое число)Опция.
            'Если документ c таким номером не найден,
            ' возвращается ошибка ““0x48 - Нет запрошенных данных ”.
            ' Максимальное время ожидания ответа – 9 сек.
            'Если параметр номер документа равен нулю, возвращаются данные следующего документа.
            'В параметре “Опция” можно задавать номер смены.
            ' При этом, если номер смены документа не совпадает с заданным в параметре,
            ' вернется ошибка ““0x48 - Нет запрошенных данных ”.
            'Ответные параметры: последовательность структур данных по документу.
        
            dim Res
            Res = Ecr.ExecuteCommand("71", Num & Splt & "")
            if Res <> 0 then
              call GetErrorDescription(Res)
              exit function
            end if
            
            ' счітываем структуры, хранящие данные по чеку, загоняем в qLinesArr
            ' в Ecr.ResultString возвращается текст из 16-ных значений, разделенный символом Chr(27)
            ' Символ Chr(27) разделяет структуры (шапка чека, позиции, скидки и тд). По первобу байту структуры
            ' можно определить ее тип. Дальше известен формат каждой структуры (набор, размер, и тип полей),
            ' поэтому можно разобрать каждую
            dim Str, Ind, Code, Lines
            Lines = Split(Ecr.ResultString, Chr(27))
            Ind = 0
        
            dim i
            for i = 0 to UBound(Lines)
              Str = Lines(i)
              Code = Struct_ReadInteger(Str, 1)
              select case Code
                case 1 ' информация по открытию чека
                  call Struct_Open(Str, qLinesArr, Ind, Num)
                case 2,3,4 ' закрытіе чека
                  call Struct_Close(Str, qLinesArr, Ind, Num, Code)
                case 5 ' Добавление позиции
                  call Struct_Item(Str, qLinesArr, Ind, Num)
                case 6,7 ' Скидка / Наценка
                  call Struct_Discount(Str, qLinesArr, Ind, Num, Code)
                case 8 ' Оплата
                  call Struct_Payment(Str, qLinesArr, Ind, Num)
                case 9, 10, 11, 13, 15, 16 ' Подитог, Итог чека, Сдача, Наличные в ящике,
                                           ' Итог скидок , Итог наценок
                  call Struct_Total(Str, qLinesArr, Ind, Num, Code)
                case 12 ' Внесение/выдача суммы
                  call Struct_CashInOut(Str, qLinesArr, Ind, Num)
                case 14, 17 ' Дополнительный реквизит, Название секции налогов
                  call Struct_Recv(Str, qLinesArr, Ind, Num, Code)
                case 18 ' Налоги
                  call Struct_Tax(Str, qLinesArr, Ind, Num)
              end select
            next
        
            EKLZDocument = true
          End Function
          
        
        
          Public Function EKLZ(qParams, qLineArr)
            ClearError
            EKLZ = false
        
            if NoDll then exit function
            if not IsInit then exit function
        
            if IsNull(qParams.Number) then qParams.Number = 0
            if IsNull(qParams.ToNumber) then qParams.ToNumber = 0
            if IsNull(qParams.IsAll) then qParams.IsAll = false
            if not IsArray(qLineArr) then
              UnknownErr
              exit function
            end if
            
            'Запрос сведений по КЛ (0x72)
            'Эта команда позволяет получать различную информацию КЛ
            'Входные параметры:
            '   (Целое число) Номер запроса,
            '   (Целое число) Параметры запроса.
            'Ответные параметры: (Целое число) Номер запроса, Возвращаемые данные.
            'Тип и количество возвращаемых данных зависит от значения номера запроса.
            ' Номер запроса = 1:
            '   Номер запроса
            '   Номер первого документа в смене
            '   Номер последнего документа в смене
            
            
            ' если все док-ты за смену:
            if qParams.IsAll then
              dim Res
              Res = Ecr.ExecuteCommand("72", "1" & Splt & ShiftNumber)
              if Res <> 0 then
                call GetErrorDescription(Res)
                exit function
              end if
              
              dim Arr
              Arr = Split(Ecr.ResultString, Splt)
              ' проверить на корректность массив, созданный на основании Ecr.ResultString
              if not CheckOutputFormat(Arr, 2) then exit function
              ' находим крайние номера за смену
              if IsNumeric(Arr(1)) then qParams.Number = CLng(Arr(1))
              if IsNumeric(Arr(2)) then qParams.ToNumber = CLng(Arr(2))
            end if
            
            if (qParams.Number <= 0 ) then
              UnknownErr
              exit function
            end if
            if (qParams.ToNumber < qParams.Number)  then
              UnknownErr
              exit function
            end if
        
            dim  N
            ' если с Number по ToNumber, делаем цикл по всем номерам между заданными.
            ' Если док-т существует и фискальный, записываем данные по нему в  qLineArr
        
            N = qParams.Number
            Do While ( N <= qParams.ToNumber)
              call EKLZDocument(N, qLineArr )
              N = N + 1
            Loop
          End Function
        
        
        
          
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        ' вспомогательные @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
          ' массивы с описаниями некоторых статусов. Инициализируются проседурой InitStateLists
          ' Статус фатального состояния КСА . Получается командой 0х00
          Private FListDeviceFatal
          ' Статус текущих флагов КСА . Получается командой 0х00
          Private FListDeviceState
          ' Статус флагов работы с СКНО . Получается командой 0х00
          Private FListSKNO
          ' Статусы печатающего устройства . Получается командой 0х04
          Private FListPrinter
          ' Заполнить текстовые описания статусов
          Private Sub InitStateLists
            FListDeviceFatal = Array( _
              "Неверная контрольная сумма NVR", _
              "Неверная контрольная сумма в конфигурации", _
              "Ошибка интерфейса с БЭП", _
              "Неверная контрольная сумма блока энергонезависимой памяти" , _
              "Ошибка записи в БЭП", _
              "БЭП не авторизован", _
              "Фатальная ошибка памяти контрольной ленты")
              
            FListDeviceState = Array( _
              "Не была вызвана функция Начало работы", _
              "Учебный режим", _
              "Смена открыта", _
              "Смена больше 24 часов", _
              "Присутствуют данные в буфере контрольной ленты (буфер не пустой)", _
              "Зарезервирован", _
              "Нет памяти для закрытия смены в БЭП", _
              "Зарезервирован", _
              "Не было завершено закрытие смены, необходимо повторить операцию")
              
            FListSKNO = Array ( _
              "Общая ошибка СКНО", _
              "Отсутствует связь с СКНО", _
              "Отсутствует СКЗИ", _
              "Неисправно СКНО", _
              "Идентификация не прошла успешно", _
              "Запрет обслуживания по окончанию сертификата СКЗИ", _
              "Запрет обслуживания по непереданным Z-отчетам", _
              "Запрет обслуживания по переполнению памяти СКНО")
              
            FListPrinter = Array( _
              "Принтер не готов", _
              "В принтере нет бумаги", _
              "Открыта крышка принтера", _
              "Ошибка резчика принтера", _
              "Нет связи с принтером")
          End Sub
          
          ' проверить флаги. Value - десятичное число, в котором зашиты флаги состояний-ошибок
          ' Функция переводит Value в массив флагов с помощью GetFlags. Если один из элементов массива равен 1,
          ' Считаем, что произошла ошибка, а описание ошибки получаем из FlagDescrArr
          Private Function CheckFlagList(Value, FlagDescrArr)
            CheckFlagList = false
            if not IsNumeric(Value) then exit function
            
           ' получаем массив двоичных флагов из десятичного Value
            dim Flags
            Flags = GetFlags(Value)
            
            ' проверяем массив. Единичка - ошика, а код ошибки - в соотв элементе  FlagDescrArr
            dim i
            for i = 0 to UBound(FlagDescrArr)
              if Flags(i) = 1 then
                ErrorCode = -3
                ErrorDescription = FlagDescrArr(i)
                exit function
              end if
            next
            
            CheckFlagList = true
          End Function
          
          ' проверить флажок в статусе текущих флагов КСА. Flag - номер бита  (см FListDeviceState)
          Private Function CheckDeviceStateFlag(Flag)
            CheckDeviceStateFlag = false
            if NoDll then exit function
            
              ' запросить статусы устройства
            dim Res
            Res = Ecr.ExecuteCommand("00", "")
            If Res <> 0 Then
              GetErrorDescription(Res)
              Exit Function
            End If
        
            ' в ResultString записываются выходные параметры, разделенные Chr(27)
            ' Arr(0) - Статус фатального состояния КСА
            ' Arr(1) - Статус текущих флагов КСА
            ' Arr(2) - Статус документа
            ' Arr(3) - Статус флагов работы с СКНО (появилось в последних версиях прошивки)
            dim Arr
            Arr = Split(Ecr.ResultString, Splt)
            ' проверить на корректность массив, созданный на основании Ecr.ResultString
            if not CheckOutputFormat(Arr, 3) then exit function
        
            ' здесь нас интересует Arr(2) - Статус текущих флагов КСА
            ' получаем массив двоичных флагов из десятичного Arr(2)
            dim Flags
            Flags = GetFlags(Arr(1))
            if Flag < 0 or Flag > UBound(Flags) then
              UnknownErr
              exit function
            end if
            
            CheckDeviceStateFlag = (Flags(Flag) = 1)
          End Function
          
          'перевести десятичное число в массив битов
          'например, 9 = 0000 0000 0000 1001
          'т.к. биты считаются справа налево от младшего к старшему, то массив будет (1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0)
          Private Function GetFlags(Value) ': Array of smallint
            dim i
            dim Arr(15)
            
            for i = 0 to 15
              Arr(i) = 0
            next
        
            i = 0
            do
              Arr(i) = Value mod 2
              Value = Value \ 2
              i = i + 1
            loop until Value = 0
            GetFlags = Arr
          End Function
          
          'перевести десятичное число в двоичное
          'На выходе - строка из нулей и единиц. Добивается спереди нулями до размера Size
          ' например DecimalToBinary(2,4) = 0011
          '          DecimalToBinary(2,8) = 00000011
          ' Value :integer, Size: integer
          Private Function DecimalToBinary(Value, Size) ': string
        
            Dim DecToBin
            Do
              DecToBin = Value Mod 2 & DecToBin
              Value = Value \ 2
            Loop Until Value = 0
        
            DecimalToBinary = String(Size - Len(DecToBin), "0") & DecToBin
          End Function
          
          'перевести двоичное число (в виде строки) в десятичное
          ' strBin: string
          Function BinaryToDecimal(ByVal strBin) ': integer
            Dim intLen, intPos, intValue, strTemp, strValue
            intLen = Len(strBin)
            intPos = 1
            intValue = 0
            strTemp = strReverse(strBin)
            Do While intPos <= intLen
              strValue = Mid(strTemp, intPos, 1)
              Select Case strValue
                Case "0"
                Case "1"
                  If intPos = 1 Then
                    intValue = intValue + 1
                  Else
                    intValue = intValue + (2 ^ (intPos - 1))
                  End If
                Case Else
                  intValue = Empty
                Exit Do
              End Select
              intPos = intPos + 1
            Loop
            BinaryToDecimal = intValue
          End Function
          
          '16-чное чісло перевесті в 10-чное целое
          ' sHex - 16-чное чісло в віде строкі
          Private Function HexToInteger(sHex)' : integer
        
            HexToInteger = 0
            if sHex = "" then exit function
            
            dim HexChar, nDec
            HexChar = "0123456789ABCDEF"
            
            dim Res
            Res = 0
            
            dim i, j
            j = 0
            ' от конца строки к началу. Например, если строк 02F3, то двігаемся от 3 к 0
            for i = len(sHex) to 1 step - 1
              ' по сімволу в строке получаем его числовое значение. "0" = 0, "А" = 10б "В" = 11 и тд
              nDec = InStr(1, HexChar, Mid(sHex, i, 1)) - 1
              if nDec < 0 then exit function 'в строке - не 16чное число
              Res = Res + nDec * (16 ^ j)
              j = j + 1
            next
            HexToInteger = Res
          End Function
        
          
          ' проверить на корректность массив, созданный на основании Ecr.ResultString
          Private Function CheckOutputFormat(Arr, Size) ': boolean
            CheckOutputFormat = false
            if not IsArray(Arr) then
              UnknownErr
              exit function
            end if
            
            if UBound(Arr) < Size then
              UnknownErr
              exit function
            end if
        
            CheckOutputFormat = true
          End Function
          
          
          'сумму S перевести в строку
          'запятую заменить на точку
          Public Function FormatSum(S) ': string
            dim V
            V = CStr(S)
            if V = "" then V = "0"
            
            V = Join(Split(V, ","), ".")
            FormatSum = V
          End Function
          
          ' сумма из ФР
          ' если пустая строка или не число, возвращает 0
          public function DecodeSum(V) ':currency
            DecodeSum = 0
            V = Trim(V)
            if Len(V) > 0 then
              dim Sep
              Sep = Application.DecimalSeparatorSys
              if Sep <> "." then
                V = Join(Split(V, "."), Sep)
              end if
              if Sep <> "," then
                V = Join(Split(V, ","), Sep)
              end if
              on error resume next
                DecodeSum = CCur(V)
              on error goto 0
            end if
          end function
          
          ' сумма для ФР
          public function EncodeSum(V) ': string
            EncodeSum = CStr(V)
            if EncodeSum = "" then
              EncodeSum = "0"
            else
              dim Sep
              Sep = Application.DecimalSeparatorSys
              if Sep <> "." then
                EncodeSum = _
                  Join(Split(EncodeSum, Sep), ".")
              end if
            end if
          end function
          
          ' форматировать число до 2х знаков после запятой
          Private Function FormatCur(V)
            dim S
            S = CStr(V)
        
            ' заменили "," на "."
            S = Join(Split(S, "," ), ".")
        
            ' разбили на "до точки" и "после точки"
            dim Arr
            Arr = Split(S, ".")
        
            ' целая и дробная части
            dim S1, S2
            if UBound(Arr) = 0 then
              S1 = Arr(0)
              S2 = ""
            else
              S1 = Arr(0)
              S2 = Arr(1)
            end if
        
            ' дробную часть дополнили нулями
            if Len(S2) < 2 then
              S2 = Left(S2 & "00", 2)
            end if
            FormatCur = S1 & "." & S2
          End Function
          
          ' собрать флаги шрифта в число
          Private Function GetFontFlagsByFontObject(Font)  ': integer
            dim FontCode, IsDoubleHeigth, IsDoubleWidth
            FontCode = 0
            IsDoubleHeigth = 0
            IsDoubleWidth = 0
            
            if not Assigned(Font) then exit function
            
            if Font.FontCode > 0 then
              FontCode = Font.FontCode
            elseif Font.FontName <> "" then
              select case Font.FontName
                case "13х24"
                  FontCode = 0
                case "10х24"
                  FontCode = 1
                case "13х24_Pirit_bold"
                  FontCode = 2
                case "10х20_Pirit_bold"
                  FontCode = 3
                case "8х14"
                  FontCode = 4
                case "24х45"
                  FontCode = 5
                case "24х45_bold"
                  FontCode = 6
                case "13х24_Pirit"
                  FontCode = 7
                case "10х20_Pirit"
                  FontCode = 8
                case else
                  FontCode = 0
              end select
            else
              FontCode = 0
            end if
        
            ' собираем флаги. Младший байт - код шрифта, в старшем флаги двойной высоты и ширины
            ' Двойная ширина: 0010 0000 = 32, двойная высота 0001 0000 = 16
            if Font.IsDoubleHeigth then IsDoubleHeigth = 16
            if Font.IsDoubleWidth then IsDoubleWidth = 32
            FontCode = FontCode + IsDoubleHeigth + IsDoubleWidth
            
            GetFontFlagsByFontObject = FontCode
          End Function
          
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        ' ЭКЛЗ - вспомогательные функции @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        
          'прочитать число из S размером Size
          'обрезать S
          Private Function Struct_ReadInteger(ByRef S, Size)  ': integer
            Struct_ReadInteger = 0
            dim ValS, lS, lValS
            ' считать Size байтов (каждый байт - 2 символа строки, это 16-ричный код)
            ValS = left(S, Size * 2)
        
            ' обрезать Str
            lS = len(S)
            lValS = len(ValS)
            if lS > lValS then
              S = Right(S, lS - lValS)
            else
              S = ""
            end if
            'right("111122", len("111122") -len("1111")) = "22"
            ' перевести ValS в число
            ' например, строка имеет вид e3 07 00.
            ' Перегоняем ее в 00 07 e3, и это 16-ное число переводим в 10-ное
            dim sHex , i
            sHex = ""
            i = Size * 2 - 1
            while len(sHex) < lValS
              sHex = sHex & mid(ValS, i, 2)
              i = i - 2
            wend
            sHex = UCase(sHex)
        
            Struct_ReadInteger = HexToInteger(sHex)
          End Function
        
          'прочитать дату из Str
          'обрезать Str
          Private Function Struct_ReadDateTime(ByRef Str) ': DateTime
            Struct_ReadDateTime = CDate(-1)
            on error resume next
            dim D,M,Y,Ho,Mi,Se
            D = Struct_ReadInteger(Str, 1)
            M = Struct_ReadInteger(Str, 1)
            Y = Struct_ReadInteger(Str, 2)
            Ho = Struct_ReadInteger(Str, 1)
            Mi = Struct_ReadInteger(Str, 1)
            Se = Struct_ReadInteger(Str, 1)
            Struct_ReadDateTime = DateSerial(Y,M,D) + TimeSerial(Ho,Mi,Se)
            on error goto 0
          End Function
          
          'прочитать строку из Str размером Size
          'обрезать Str
          Private Function Struct_ReadString(ByRef Str, Size)  ': string
            dim i,  CharCode, S
            Struct_ReadString = ""
            S = ""
            'on error resume next
            for i = 0 to Size - 1
              CharCode = Struct_ReadInteger(Str, 1)
              if CharCode > 0 then
                 S = S & Chr(CharCode)
              end if
            next
            S = System.OemToAnsi(Trim(S))
            'on error goto 0
            Struct_ReadString = S
          End Function
          
          'прочитать число типа currency размером Size
          'обрезать Str
          Private Function Struct_ReadCurrency(ByRef Str, Size)  ': currency
            Struct_ReadCurrency = CCur(0.0)
            on error resume next
            Struct_ReadCurrency = CCur(Struct_ReadInteger(Str, Size))/ 10000
            on error goto 0
          End Function
          
          'прочитать массив из Str размером ArrSizе, размер эл-та - ItemSize
          'обрезать Str
          Private Function Struct_ReadArray(ByRef Str, ArrSize, ItemSize)  ': string
            dim i,  CharCode
            dim Arr()
            redim preserve Arr(ArrSize - 1)
            on error resume next
            for i = 0 to ArrSize - 1
              Arr(i) = Struct_ReadInteger(Str, ItemSize)
            next
            on error goto 0
            Struct_ReadArray = Arr
          End Function
        
          ' добавіть объект TVB_FR_EKLZLine в массів qLinesArr, заполнить его даными Ind, Num, S
          ' ind должен наростіться
          Private Sub AddLineToEklzObject(ByRef qLinesArr, ByRef Ind, Num, S)
            dim O
            set O = new TVB_FR_EKLZLine
            Ind = Ind + 1
        
            O.NumDoc = Num
            O.LineIndex = Ind
            O.Text = S
        
            redim preserve qLinesArr(UBound(qLinesArr) + 1)
            set qLinesArr(UBound(qLinesArr)) = O
          End Sub
          
          ' открытие чека
          'прочитать данные из Str
          ' разбіть данные на строкі, загнать в массів qLinesArr
          ' Ind - індекс строкі
          'обрезать Str
          Private Sub Struct_Open(ByRef Str, ByRef qLinesArr, ByRef Ind, Num)
            dim O
            set O = new T_Pirit_Open
            ' тип док-та
            O.DocumentType = Struct_ReadInteger(Str, 1)
            ' номер кассира
            O.UserNum = Struct_ReadInteger(Str, 2)
            ' номер отдела
            O.DepNum = Struct_ReadInteger(Str, 2)
            ' номер чека в гедыміне
            O.DocNum = Struct_ReadInteger(Str, 4)
            ' номер смены
            O.ShiftNum = Struct_ReadInteger(Str, 2)
            ' номер чека на фр сістемный
            O.SysCheckNum = Struct_ReadInteger(Str, 4)
            ' дата и время
            O.DateTime = Struct_ReadDateTime(Str)
            ' имя кассира
            O.User = Struct_ReadString(Str, 24)
            ' Контрольная сумма
            O.CheckSum = Struct_ReadInteger(Str, 1)
            
            dim S
            select case O.DocumentType
              case 1
                S = "Сервисный документ"
              case 2
                S = "Чек на продажу"
              case 3
                S = "Чек на возврат"
              case 4
                S = "Внесение в кассу"
              case 5
                S = "Инкассация"
              case 6
                S = "Чек оформления заказа"
              case 7
                S = "Чек закрытия заказа"
              case 8
                S = "Чек отмены заказа"
              case 9
                S = "Чек добавления заказа"
              case 10
                S = "Чек коррекции заказа"
              case 11
                S = "Счет на оплату"
              case else
                exit sub
            end select
            call AddLineToEklzObject(qLinesArr, Ind, Num, "****************************")
            
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            
            S = "№ в учетной системе: " & O.DocNum
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            
            S = "№ на ФР: " & O.SysCheckNum
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
        
            if DeviceOptions.PrintDepCode then
              S = "№ отдела: " & O.DepNum
              call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            end if
            
            S = "Кассир: " & O.User
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            
            S = "№ смены: " & O.ShiftNum
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            
            S = "Время открытия документа: " & O.DateTime
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            
          End Sub
          
          ' закрытіе чека
          ' прочитать данные из Str
          ' разбіть данные на строкі, загнать в массів qLinesArr
          ' Ind - індекс строкі
          'обрезать Str
          'Code - тіп закрытія (обычное ілі отмена)
          Private Sub Struct_Close(ByRef Str, ByRef qLinesArr, ByRef Ind, Num, Code)
            dim O
            set O = new T_Pirit_Close
            ' сумма
            O.Summ = Struct_ReadCurrency(Str, 8)
            ' дата и время закрытия
            O.DateTime = Struct_ReadDateTime(Str)
            ' идентификатор
            O.ID = Struct_ReadArray(Str, 12, 1)
            ' Контрольная сумма
            O.CheckSum = Struct_ReadInteger(Str, 1)
            
            dim S
            if Code = 4 then
              S = "ДОКУМЕНТ ОТМЕНЕН"
              call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            end if
            
            S = "Итоговая сумма: " & FormatCur(O.Summ)
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            
            S = "Время закрытия документа: " & O.DateTime
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
          End Sub
        
         ' Добавление позиции
          Private Sub Struct_Item(ByRef Str, ByRef qLinesArr, ByRef Ind, Num)
            dim O
            set O = new T_Pirit_Item
            ' признак коррекции (если в этом поле не ноль, то коррекция)
            O.Correction = Struct_ReadInteger(Str, 1)
            ' цена
            O.Price = Struct_ReadCurrency(Str, 8)
            ' количество
            O.Quantity = Struct_ReadCurrency(Str, 8)
            ' сумма
            O.Summ = Struct_ReadCurrency(Str, 8)
            ' ед. изм.
            O.ValueName = Struct_ReadString(Str, 5)
            ' код строки
            O.PosCode = Struct_ReadString(Str, 5)
            ' код ТМЦ
            O.Alias = Struct_ReadString(Str, 19)
            ' имя ТМЦ
            O.Name = Struct_ReadString(Str, 57)
            ' номер отдела
            O.DepNum = Struct_ReadInteger(Str, 2)
            ' номер налога
            O.TaxNumber = Struct_ReadInteger(Str, 2)
            ' Контрольная сумма
            O.CheckSum = Struct_ReadInteger(Str, 1)
            
            dim S, MinusFlag
            MinusFlag = ""
            if O.Correction <> 0 then
              S = "Коррекция"
              call AddLineToEklzObject(qLinesArr, Ind, Num, S)
              MinusFlag = "-"
            end if
            
            if DeviceOptions.PrintDepCode then
              S = "№ отдела: " & O.DepNum
              call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            end if
            
            ' ТМЦ
            S = O.Alias & " " & O.Name
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            
            ' кол-во Х цена = сумма
            S = MinusFlag & FormatCur(O.Quantity) & " X " & FormatCur(O.Price) & " = " & MinusFlag & FormatCur(O.Summ)
            S = Right(String(80, " ") & S, 80)
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            
            ' налог
            dim oTax
            set oTax = DeviceOptions.Tax(O.TaxNumber)
            if Assigned(oTax) then
              S = "Налог: " & FormatCur(oTax.Percent) & "% " & oTax.Name
              call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            end if
          End Sub
        
          ' Скидка / Наценка
          Private Sub Struct_Discount(ByRef Str, ByRef qLinesArr, ByRef Ind, Num, Code)
            dim O
            set O = new T_Pirit_Discount
            
            'Признак скидки/наценки на позицию
            'Если поле равно “0” – на чек,
            'иначе – скидка/наценка на позицию
            O.IsPos = Struct_ReadInteger(Str, 1)
            ' Признак абсолютной скидки/наценки
            ' Если поле равно “0” – процентная,
            ' иначе – абсолютная
            O.IsSum = Struct_ReadInteger(Str, 1)
            ' Признак коррекции
            ' Коррекция скидки, если поле не равно “0”
            O.Correction = Struct_ReadInteger(Str, 1)
            ' Наименование
            O.Name = Struct_ReadString(Str, 39)
            ' Процент. Для абсолютных скидок наценок поле не используется
            O.Percent = Struct_ReadCurrency(Str, 8)
            ' Сумма
            O.Summ = Struct_ReadCurrency(Str, 8)
            ' Контрольная сумма
            O.CheckSum = Struct_ReadInteger(Str, 1)
            
            dim S, MinusFlag
            MinusFlag = ""
            if Code = 6 then
              if O.Correction then
                S = "Коррекция скидки "
              else
                S = "Скидка "
                MinusFlag = "-"
              end if
            else
              if O.Correction then
                S = "Коррекция наценки "
                MinusFlag = "-"
              else
                S = "Наценка "
              end if
            end if
            if O.IsPos <> 0 then
              S = S & " на позицию чека:"
            else
              S = S & " на чек:"
            end if
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            
            S = MinusFlag & FormatCur(O.Summ)
            if O.Name <> "" then S = S & " " & O.Name
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            
          End Sub
          
          ' Оплата
          Private Sub Struct_Payment(ByRef Str, ByRef qLinesArr, ByRef Ind, Num)
            dim O
            set O = new T_Pirit_Payment
            ' Наименование оплаты
            O.Name = Struct_ReadString(Str, 45)
            ' Тип оплаты
            O.TypeName = Struct_ReadString(Str, 19)
            ' Сумма
            O.Summ = Struct_ReadCurrency(Str, 8)
            ' Контрольная сумма
            O.CheckSum = Struct_ReadInteger(Str, 1)
            
            dim S
            S = O.TypeName & ": " & FormatCur(O.Summ)
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
          End Sub
          
          ' Подитог, Итог чека, Сдача, Наличные в ящике,
          ' Итог скидок , Итог наценок
          Private Sub Struct_Total(ByRef Str, ByRef qLinesArr, ByRef Ind, Num, Code)
            dim O
            set O = new T_Pirit_Total
            ' тип док-та
            O.DocumentType = Struct_ReadInteger(Str, 1)
            ' Сумма
            O.Summ = Struct_ReadCurrency(Str, 8)
            ' Контрольная сумма
            O.CheckSum = Struct_ReadInteger(Str, 1)
            
            if O.Summ = 0 and Code <> 10 then exit sub
            
            dim S
            select case Code
              case 10
                S = "Итог чека: "
              case 11
                S = "Сдача: "
              case 12
                S = "Наличные в ящике: "
              case 15
                S = "Итог скидок: "
              case 16
                S = "Итог наценок: "
              case else
                exit sub  ' подытог (9) не выводім
            end select
            
            S = S & FormatCur(O.Summ)
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
          End Sub
          
          ' Внесение/выдача суммы
          Private Sub Struct_CashInOut(ByRef Str, ByRef qLinesArr, ByRef Ind, Num)
        
            dim O
            set O = new T_Pirit_CashInOut
            ' Наименование
            O.Name = Struct_ReadString(Str, 45)
            ' Сумма
            O.Summ = Struct_ReadCurrency(Str, 8)
            ' Контрольная сумма
            O.CheckSum = Struct_ReadInteger(Str, 1)
            
            dim S
            S = FormatCur(O.Summ)
            if O.Name <> "" then S = S & " (" & O.Name & ")"
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
          End Sub
          
          ' Дополнительный реквизит, Название секции налогов
          Private Sub Struct_Recv(ByRef Str, ByRef qLinesArr, ByRef Ind, Num, Code)
            dim O
            set O = new T_Pirit_Recv
            ' Атрибут печати
            O.FontFlag  = Struct_ReadInteger(Str, 1)
            ' Признак перевода строки
            O.IsVBCR = Struct_ReadInteger(Str, 1)
            ' Текст
            O.Text = Struct_ReadString(Str, 74)
            ' Контрольная сумма
            O.CheckSum = Struct_ReadInteger(Str, 1)
            
            if O.Text <> "" then
              dim S
              S =  O.Text
              call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            end if
          End Sub
          
          ' Налоги
          Private Sub Struct_Tax(ByRef Str, ByRef qLinesArr, ByRef Ind, Num)
            dim O
            set O = new T_Pirit_Tax
            ' Номер налога в таблице
            O.Num = Struct_ReadInteger(Str, 2)
            ' Наименование
            O.Name = Struct_ReadString(Str, 19)
            ' Процент
            O.Percent = Struct_ReadCurrency(Str, 8)
            ' Сумма
            O.Summ = Struct_ReadCurrency(Str, 8)
            ' Контрольная сумма
            O.CheckSum = Struct_ReadInteger(Str, 1)
            
            if O.Summ = 0 then exit sub
            
            dim S
            S = O.Name & " %" &  FormatCur(O.Percent)
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
            
            S = FormatCur(O.Summ)
            call AddLineToEklzObject(qLinesArr, Ind, Num, S)
          End Sub
          
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        ' чтение и запись параметров ФР в хранилище @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
          ' Открыть форму параметров, подставить туда параметры из хранилища,
          ' при нажатии ОК сохранить то, что поменял пользователь
          Public Sub ConnectOptions
            Dim Creator
            Set Creator = New TCreator
        
            Dim Form
            Set Form = Creator.GetObject(Null, "usrf_ecr_Pirit_Params", "usrf_ecr_Pirit_Params")
        
            ' подключение:
            ' СОМ порт
            Dim edComPort
            Set edComPort = Form.GetComponent("usrg_edComPort")
            edComPort.Value  = ConnectionParams.ComNumber
            
            ' пароль
            Dim edPassword
            Set edPassword = Form.GetComponent("usrg_edPassword")
            edPassword.Text = ConnectionParams.Password
            
            ' скорость
            Dim rgBaudRate
            Set rgBaudRate = Form.GetComponent("usrg_rgBaudRate")
            dim BR
            BR = Array(4800, 9600, 19200, 38400, 57600, 115200)
            if ConnectionParams.BaudRate <= 0 then ConnectionParams.BaudRate = 57600
            dim i
            for i = 0 to UBound(BR)
              if ConnectionParams.BaudRate = BR(i) then exit for
            next
            if i < 0 then i = 0
            if i > (rgBaudRate.Items.Count - 1 ) then i = 0
            rgBaudRate.ItemIndex = i
            
            ' шрифты дескрипторов:
            call ConnectOptions_ShowFont(Form, "DocNumber", Styles.ValueFonts.DocNumber)
            call ConnectOptions_ShowFont(Form, "User", Styles.ValueFonts.User)
            call ConnectOptions_ShowFont(Form, "PlaceType", Styles.ValueFonts.PlaceType)
            call ConnectOptions_ShowFont(Form, "SectionType", Styles.ValueFonts.SectionType)
            call ConnectOptions_ShowFont(Form, "BillNumber", Styles.ValueFonts.BillNumber)
            call ConnectOptions_ShowFont(Form, "AddInfoEmployee", Styles.ValueFonts.AddInfoEmployee)
            call ConnectOptions_ShowFont(Form, "AddInfoCard", Styles.ValueFonts.AddInfoCard)
            call ConnectOptions_ShowFont(Form, "AddInfoOther", Styles.ValueFonts.AddInfoOther)
        
            'заголовок чека:
            call ConnectOptions_ReadHeaderLines(Form)
            'подножие чека:
            call ConnectOptions_ReadFooterLines(Form)
            
            ' дополнительно:
            ' Печать с уменьшенным межстрочным интервалом, для экономии бумаги
            Dim cbEconomicPrint
            Set cbEconomicPrint = Form.GetComponent("usrg_cbEconomicPrint")
            cbEconomicPrint.Checked = AdditionalSettings.EconomicPrint
            
            ' Полная отрезка чека
            Dim cbFullCut
            Set cbFullCut = Form.GetComponent("usrg_cbFullCut")
            cbFullCut.Checked = AdditionalSettings.FullCut
            
            ' Номер дизайна чека
            '   0- обычный (*)
            '   1- расширенный
            '   2- экономный
            '   3- для бумаги 57мм
            '   16 и выше - дополнительные загружаемые дизайны
            Dim edDesignType
            Set edDesignType = Form.GetComponent("usrg_edDesignType")
            if AdditionalSettings.DesignType < 0 or _
               AdditionalSettings.DesignType > 31 or _
              (AdditionalSettings.DesignType > 4 and AdditionalSettings.DesignType < 16) then _
                  AdditionalSettings.DesignType = 0
            edDesignType.Value = AdditionalSettings.DesignType
        
            If Form.ShowModal = vbOk Then
              ' подключение:
              ConnectionParams.ComNumber = edComPort.Value
              ConnectionParams.Password  = edPassword.Text
              ConnectionParams.BaudRate = BR(rgBaudRate.ItemIndex)
              
              ' шрифты дескрипторов:
              call ConnectOptions_SaveFont(Form, "DocNumber", Styles.ValueFonts.DocNumber)
              call ConnectOptions_SaveFont(Form, "User", Styles.ValueFonts.User)
              call ConnectOptions_SaveFont(Form, "PlaceType", Styles.ValueFonts.PlaceType)
              call ConnectOptions_SaveFont(Form, "SectionType", Styles.ValueFonts.SectionType)
              call ConnectOptions_SaveFont(Form, "BillNumber", Styles.ValueFonts.BillNumber)
              call ConnectOptions_SaveFont(Form, "AddInfoEmployee", Styles.ValueFonts.AddInfoEmployee)
              call ConnectOptions_SaveFont(Form, "AddInfoCard", Styles.ValueFonts.AddInfoCard)
              call ConnectOptions_SaveFont(Form, "AddInfoOther", Styles.ValueFonts.AddInfoOther)
              
              ' Сохранить клише из формы параметров в Styles
              call ConnectOptions_SaveHeaderLines(Form)
              
              ' Сохранить подножие из формы параметров в Styles
              call ConnectOptions_SaveFooterLines(Form)
              
              ' дополнительно:
              AdditionalSettings.EconomicPrint = cbEconomicPrint.Checked
              AdditionalSettings.FullCut = cbFullCut.Checked
              AdditionalSettings.DesignType = edDesignType.Value
              if AdditionalSettings.DesignType < 0 or _
                 AdditionalSettings.DesignType > 31 or _
                (AdditionalSettings.DesignType > 4 and AdditionalSettings.DesignType < 16) then _
                    AdditionalSettings.DesignType = 0
                    
              call SaveParams
            End If
          End Sub
          
          ' загрузить шрифт в форму параметров из свойств
          'Name - часть имени компонента
          'Font - шрифт
          Private Sub ConnectOptions_ShowFont(Form, Name, Font)
            Dim cb, cbH, cbW, i
            Set cb = Form.GetComponent("usrg_cb" & Name)
            Set cbH = Form.GetComponent("usrg_cb" & Name & "H")
            Set cbW = Form.GetComponent("usrg_cb" & Name & "W")
            i = Font.FontCode
            if i < 0 or i > (cb.Items.Count - 1) then i = 0
            cb.ItemIndex = i
            cbH.Checked = Font.IsDoubleHeigth
            cbW.Checked = Font.IsDoubleWidth
          End Sub
          
          'Сохранить шрифт в форму параметров из свойств
          'Name - часть имени компонента
          'Font - шрифт
          Private Sub ConnectOptions_SaveFont(Form, Name, Font)
            Dim cb, cbH, cbW
            Set cb = Form.GetComponent("usrg_cb" & Name)
            Set cbH = Form.GetComponent("usrg_cb" & Name & "H")
            Set cbW = Form.GetComponent("usrg_cb" & Name & "W")
        
            Font.FontCode = cb.ItemIndex
            Font.FontName = cb.Text
            Font.IsDoubleHeigth = cbH.Checked
            Font.IsDoubleWidth = cbW.Checked
          End Sub
          
          ' Считать настройки шрифта из хранилща
          Private Sub ConnectOptions_ReadFontStorage(Name, Font)
            Font.FontCode = GlobalStorage.ReadInteger("ecr_FR_Options\Pirit\Font\" & Name, "FontCode", 0)
            Font.FontName = GlobalStorage.ReadString("ecr_FR_Options\Pirit\Font\" & Name, "FontName", "13х24")
            Font.IsDoubleHeigth = GlobalStorage.ReadBoolean("ecr_FR_Options\Pirit\Font\" & Name, "IsDoubleHeigth", false)
            Font.IsDoubleWidth = GlobalStorage.ReadBoolean("ecr_FR_Options\Pirit\Font\" & Name, "IsDoubleWidth", false)
          End Sub
          
          ' записать настройки шрифта в хранилще
          Private Sub ConnectOptions_SaveFontStorage(Name, Font)
            call GlobalStorage.WriteInteger("ecr_FR_Options\Pirit\Font\" & Name, "FontCode", Font.FontCode)
            call GlobalStorage.WriteString("ecr_FR_Options\Pirit\Font\" & Name, "FontName", Font.FontName)
            call GlobalStorage.WriteBoolean("ecr_FR_Options\Pirit\Font\" & Name, "IsDoubleHeigth", Font.IsDoubleHeigth)
            call GlobalStorage.WriteBoolean("ecr_FR_Options\Pirit\Font\" & Name, "IsDoubleWidth", Font.IsDoubleWidth)
          End Sub
          
          ' Считать клише из Styles в форму параметров
          Private Sub ConnectOptions_ReadHeaderLines(Form)
            dim i, j, L
            i = 1
            j = 0
            while i <= 4 and j < Styles.HeaderLinesCount
              L = Trim(Styles.HeaderLine(j).Text)
              j = j + 1
              if L <> "" then
                Form.GetComponent("usrg_eH" & i).Text = L
                i = i + 1
              end if
            wend
          End Sub
          
          ' Сохранить клише из формы параметров в Styles
          Private Sub ConnectOptions_SaveHeaderLines(Form)
            call Styles.ClearHeaderLines
            dim i, HeaderLine, L
            for i = 1 to 4
              L = Trim(Form.GetComponent("usrg_eH" & i).Text)
              if L <> "" then
                set HeaderLine = Styles.AddHeaderLine
                HeaderLine.Text = L
              end if
            next
          End Sub
          
          ' Считать клише из хранилища в Styles
          Private Sub ConnectOptions_ReadHeaderLinesStorage
            call Styles.ClearHeaderLines
            dim i, HeaderLine, L
            for i = 0 to 3
              L = Trim(GlobalStorage.ReadString("ecr_FR_Options\Pirit\Header", "S" & i, ""))
              if L <> "" then
                set HeaderLine = Styles.AddHeaderLine
                HeaderLine.Text = L
              end if
            next
          End Sub
          
          ' Сохранить клише в хранилище
          Private Sub ConnectOptions_WriteHeaderLinesStorage
            dim i, HeaderLine, L
            for i = 0 to 3
              L = ""
              set HeaderLine = Styles.HeaderLine(i)
              if Assigned(HeaderLine) then L = HeaderLine.Text
              call GlobalStorage.WriteString("ecr_FR_Options\Pirit\Header", "S" & i, L)
            next
          End Sub
          
          ' Считать подножие из Styles в форму параметров
          Private Sub ConnectOptions_ReadFooterLines(Form)
            dim i, j, L
            i = 1
            j = 0
            while i <= 4 and j < Styles.FooterLinesCount
              L = Trim(Styles.FooterLine(j).Text)
              j = j + 1
              if L <> "" then
                Form.GetComponent("usrg_eF" & i).Text = L
                i = i + 1
              end if
            wend
          End Sub
          
          ' Сохранить подножие из формы параметров в Styles
          Private Sub ConnectOptions_SaveFooterLines(Form)
            call Styles.ClearFooterLines
            dim i, FooterLine, L
            for i = 1 to 4
              L = Trim(Form.GetComponent("usrg_eF" & i).Text)
              if L <> "" then
                set FooterLine = Styles.AddFooterLine
                FooterLine.Text = L
              end if
            next
          End Sub
          
          ' Считать подножие из хранилища в Styles
          Private Sub ConnectOptions_ReadFooterLinesStorage
            call Styles.ClearFooterLines
            dim i, FooterLine, L
            for i = 0 to 3
              L = Trim(GlobalStorage.ReadString("ecr_FR_Options\Pirit\Footer", "S" & i, ""))
              if L <> "" then
                set FooterLine = Styles.AddFooterLine
                FooterLine.Text = L
              end if
            next
          End Sub
          
          ' Сохранить подножие в хранилище
          Private Sub ConnectOptions_WriteFooterLinesStorage
            dim i, FooterLine, L
            for i = 0 to 3
              L = ""
              set FooterLine = Styles.FooterLine(i)
              if Assigned(FooterLine) then L = FooterLine.Text
              call GlobalStorage.WriteString("ecr_FR_Options\Pirit\Footer", "S" & i, L)
            next
          End Sub
        
          ' чтение параметров (при создании класса)
          Private Function ReadParams
            ' подключение:
            ConnectionParams.ComNumber = GlobalStorage.ReadInteger("ecr_FR_Options\Pirit\Connection", "ComNumber", 0)
            ConnectionParams.Password  = GlobalStorage.ReadString("ecr_FR_Options\Pirit\Connection", "Password", "PIRI")
            ' для ФР Пирит скорость подключения важна
            ' и используется при открытии подключения
            ConnectionParams.BaudRate = GlobalStorage.ReadInteger("ecr_FR_Options\Pirit\Connection", "BaudRate", 57600)
            
            ' шрифты дескрипторов:
            Call ConnectOptions_ReadFontStorage("DocNumber", Styles.ValueFonts.DocNumber)
            Call ConnectOptions_ReadFontStorage("User", Styles.ValueFonts.User)
            Call ConnectOptions_ReadFontStorage("PlaceType", Styles.ValueFonts.PlaceType)
            Call ConnectOptions_ReadFontStorage("SectionType", Styles.ValueFonts.SectionType)
            Call ConnectOptions_ReadFontStorage("BillNumber", Styles.ValueFonts.BillNumber)
            Call ConnectOptions_ReadFontStorage("AddInfoEmployee", Styles.ValueFonts.AddInfoEmployee)
            Call ConnectOptions_ReadFontStorage("AddInfoCard", Styles.ValueFonts.AddInfoCard)
            Call ConnectOptions_ReadFontStorage("AddInfoOther", Styles.ValueFonts.AddInfoOther)
            
            ' Считать клише из хранилища в Styles
            Call ConnectOptions_ReadHeaderLinesStorage
            ' Считать подножие из хранилища в Styles
            Call ConnectOptions_ReadFooterLinesStorage
            
            ' дополнительно:
            AdditionalSettings.EconomicPrint = GlobalStorage.ReadBoolean("ecr_FR_Options\Pirit\Additional", "EconomicPrint", true)
            AdditionalSettings.FullCut = GlobalStorage.ReadBoolean("ecr_FR_Options\Pirit\Additional", "FullCut", false)
            AdditionalSettings.DesignType = GlobalStorage.ReadInteger("ecr_FR_Options\Pirit\Additional", "DesignType", 0)
            
          End Function
        
          ' сохранение параметров (при закрытии формы)
          Private Function SaveParams
            ' подключение:
            Call GlobalStorage.WriteInteger("ecr_FR_Options\Pirit\Connection", "ComNumber", ConnectionParams.ComNumber)
            Call GlobalStorage.WriteString("ecr_FR_Options\Pirit\Connection", "Password", ConnectionParams.Password)
            Call GlobalStorage.WriteInteger("ecr_FR_Options\Pirit\Connection", "BaudRate", ConnectionParams.BaudRate)
            
            ' шрифты дескрипторов:
            Call ConnectOptions_SaveFontStorage("DocNumber", Styles.ValueFonts.DocNumber)
            Call ConnectOptions_SaveFontStorage("User", Styles.ValueFonts.User)
            Call ConnectOptions_SaveFontStorage("PlaceType", Styles.ValueFonts.PlaceType)
            Call ConnectOptions_SaveFontStorage("SectionType", Styles.ValueFonts.SectionType)
            Call ConnectOptions_SaveFontStorage("BillNumber", Styles.ValueFonts.BillNumber)
            Call ConnectOptions_SaveFontStorage("AddInfoEmployee", Styles.ValueFonts.AddInfoEmployee)
            Call ConnectOptions_SaveFontStorage("AddInfoCard", Styles.ValueFonts.AddInfoCard)
            Call ConnectOptions_SaveFontStorage("AddInfoOther", Styles.ValueFonts.AddInfoOther)
            
            ' Сохранить клише в хранилище
            Call ConnectOptions_WriteHeaderLinesStorage
            ' Сохранить подножие в хранилище
            Call ConnectOptions_WriteFooterLinesStorage
            
            ' дополнительно:
            call GlobalStorage.WriteBoolean("ecr_FR_Options\Pirit\Additional", "EconomicPrint", AdditionalSettings.EconomicPrint)
            call GlobalStorage.WriteBoolean("ecr_FR_Options\Pirit\Additional", "FullCut", AdditionalSettings.FullCut)
            call GlobalStorage.WriteInteger("ecr_FR_Options\Pirit\Additional", "DesignType", AdditionalSettings.DesignType)
          End Function
        
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        ' конструктор, деструктор @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        
          Private Sub Class_Initialize
            FIsInit = false
            FSilentMode = false
            
            ' разделітель параметров, сімвол esc chr(27)
            Splt = Chr(27)
        
            call ClearError
        
            ' параметры соединения
            set ConnectionParams = new TVB_FR_ConnectionParams
        
            ' Заполнить текстовые описания статусов
            call InitStateLists
            
            ' создание объекта со стилями печати (шрифты, имена полей и тд)
            set Styles = new TVB_FR_StyleParams
            ' флаги печати
            set DeviceOptions = new TVB_FR_DeviceOptions
            ' информация о смене
            set SessionInfo = new TVB_FR_SessionInfo
            'данные по текущему чеку
            set CheckInfo = new TVB_FR_CheckInfo
        
            ' в отличие от других объектов с настройками,
            ' мы не знаем, к какому классу будет принадлежать этот объект.
            ' Потом, если он так и не будет присвоен,
            ' сделаем ему класс TVB_FR_ExternalFunctions с функциями-пустышками
            set ExternalFunctions = nothing
            
            ' флажок печати Z1
            FZ1InPrint = false
            
            ' доп параметры из формы параметров
            set AdditionalSettings = new T_Pirit_AdditionalSettings
            
            ' установка СОМ, пароля, скорости  и др
            call ReadParams
        
            ' кол-во чеков перед печатью документа
            FCountChecksBeforePrint  = -1
        
            On Error resume Next
              If Not Assigned(Ecr) Then
                Set Ecr = CreateObject("AddIn.DrvPirit")
              End If
            On Error goto 0
        
          End Sub
          
        
          Private Sub Class_Terminate
            set Styles = nothing
            set ConnectionParams = nothing
            set Styles = nothing
            set DeviceOptions = nothing
            set SessionInfo = nothing
            set ExternalFunctions = nothing
            set CheckInfo = nothing
            
            ' завершение сеанса связи с ФР
            if Assigned(Ecr) then
              Ecr.Close
              set Ecr = nothing
            end if
          End Sub
        End Class
        
        
        
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        ' вспомогательные структуры @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        ' Структуры из ЭКЛЗ
        
        ' открытие чека
        Class T_Pirit_Open
          ' код типа док-та
          public DocumentType
          ' номер кассира
          public UserNum
          ' номер отдела
          public DepNum
          ' номер док-та в Гедымине
          public DocNum
          ' номер смены
          public ShiftNum
          ' сквозной номер на фр
          public SysCheckNum
          ' дата и время окрытия
          public DateTime
          ' имя кассира
          public User
          ' Контрольная сумма
          public CheckSum
        End Class
        
        ' закрытие \ отмена чека
        Class T_Pirit_Close
          ' итоговая сумма
          public Summ
          ' дата и время закрытия
          public DateTime
          ' уникальный ИД (массив из 12 эл-тов)
          public ID
          ' Контрольная сумма
          public CheckSum
        End Class
        
        ' позиция
        Class T_Pirit_Item
          ' Признак коррекции
          ' Коррекция скидки, если поле не равно “0”
          public Correction
          ' цена
          public Price
          ' кол-во
          public Quantity
          ' сумма
          public Summ
          ' ед изм
          public ValueName
          ' код строки
          public PosCode
          ' артикул
          public Alias
          ' имя ТМЦ
          public Name
          ' код подразделения
          public DepNum
          ' номер налога
          public TaxNumber
          ' Контрольная сумма
          public CheckSum
        End Class
        
        ' скидка \ надбавка
        Class T_Pirit_Discount
          'Признак скидки/наценки на позицию
          'Если поле равно “0” – на чек,
          'иначе – скидка/наценка на позицию
          public IsPos
          ' Признак абсолютной скидки/наценки
          ' Если поле равно “0” – процентная,
          ' иначе – абсолютная
          public IsSum
          ' Признак коррекции
          ' Коррекция скидки, если поле не равно “0”
          public Correction
          ' Наименование
          public Name
          ' Процент. Для абсолютных скидок наценок поле не используется
          public Percent
          ' Сумма
          public Summ
          ' Контрольная сумма
          public CheckSum
        End Class
        
        ' Подитог, Итог чека, Сдача, Наличные в ящике,
        ' Итог скидок , Итог наценок
        Class T_Pirit_Total
          ' Тип документа
          public DocumentType
          ' Сумма
          public Summ
          ' Контрольная сумма
          public CheckSum
        End Class
        
        ' Оплата
        Class T_Pirit_Payment
          ' Наименование оплаты
          public Name
          ' Тип оплаты
          public TypeName
          ' Сумма
          public Summ
          ' Контрольная сумма
          public CheckSum
        End Class
        
        ' Внесение \ изъятие
        Class T_Pirit_CashInOut
          ' Наименование оплаты
          public Name
          ' Сумма
          public Summ
          ' Контрольная сумма
          public CheckSum
        End Class
        
        ' Дополнительный реквизит, Название секции налогов
        Class T_Pirit_Recv
          ' Атрибут печати
          public FontFlag
          ' Признак перевода строки
          public IsVBCR
          ' Текст
          public Text
          ' Контрольная сумма
          public CheckSum
        End Class
        
        ' Налоги
        Class T_Pirit_Tax
          ' Номер налога в таблице
          public Num
          ' Наименование
          public Name
          ' Процент
          public Percent
          ' Сумма
          public Summ
          ' Контрольная сумма
          public CheckSum
        End Class
        
        ' дополнительные параметры из формы параметров
        Class T_Pirit_AdditionalSettings
        ' Печать с уменьшенным межстрочным интервалом, для экономии бумаги
          public EconomicPrint
        ' Полная отрезка чека
          public FullCut
        ' Номер дизайна чека:
          public DesignType
        '   0- обычный (*)
        '   1- расширенный
        '   2- экономный
        '   3- для бумаги 57мм
        '   16 и выше - дополнительные загружаемые дизайны
          Private Sub Class_Initialize
            EconomicPrint = true
            FullCut = false
            DesignType = 0
          End Sub
        End Class
        
        
        
        
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147029455_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "ecr_FR_Pirit_Create"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "UNKNOWN"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2019-07-31T21:52:54+03:00
      DISPLAYSCRIPT: | 
        ECR_FR_PIRIT_CREATE
        
      ENTEREDPARAMS: ~
      SCRIPT: | 
        Option Explicit
        ' функция создания ФР Пирит
        Function ecr_FR_Pirit_Create
          Set ecr_FR_Pirit_Create = new TVB_Ecr_Pirit
        End Function
        
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147020502_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "ecr_fr_Pirit_Const"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "CONST"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2019-04-15T20:03:28+03:00
      DISPLAYSCRIPT: ~
      ENTEREDPARAMS: ~
      SCRIPT: | 
        Option Explicit
        'Константы и переменные
        ' ИД ФР Пирит в справочнике типов оборудования
        public const ecr_FRType_Pirit = "147019370_1219248801"
        
  - 
    Properties: 
      Class: "TgdcStorageFolder"
      RUID: 147029001_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      PARENT: "147015466_1522056380 GLOBAL\\NewForm"
      NAME: "usrf_ecr_Pirit_Params"
      CURR_DATA: ~
      DATA_TYPE: "F"
      DATETIME_DATA: ~
      INT_DATA: ~
      STR_DATA: ~
      EDITIONDATE: 2019-07-26T18:14:13+03:00
      BLOB_DATA: ~
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 147029003_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      PARENT: "147029001_1219248801 GLOBAL\\NewForm\\usrf_ecr_Pirit_Params"
      NAME: "Class"
      CURR_DATA: ~
      DATA_TYPE: "S"
      DATETIME_DATA: ~
      INT_DATA: ~
      STR_DATA: "TgdcCreateableForm"
      EDITIONDATE: 2019-07-26T18:14:13+03:00
      BLOB_DATA: ~
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 147029002_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      PARENT: "147029001_1219248801 GLOBAL\\NewForm\\usrf_ecr_Pirit_Params"
      NAME: "dfm"
      CURR_DATA: ~
      DATA_TYPE: "B"
      DATETIME_DATA: ~
      INT_DATA: ~
      STR_DATA: ~
      EDITIONDATE: 2019-07-26T22:54:35+03:00
      BLOB_DATA: | 
        object usrf_ecr_Pirit_Params: TgdcCreateableForm
          Tag = 0
          Left = 599
          Top = 269
          Cursor = crDefault
          Hint = ''
          HelpContext = 0
          HorzScrollBar.ButtonSize = 0
          HorzScrollBar.Color = clBtnHighlight
          HorzScrollBar.Increment = 8
          HorzScrollBar.Margin = 0
          HorzScrollBar.ParentColor = True
          HorzScrollBar.Position = 0
          HorzScrollBar.Range = 0
          HorzScrollBar.Smooth = False
          HorzScrollBar.Size = 0
          HorzScrollBar.Style = ssRegular
          HorzScrollBar.ThumbSize = 0
          HorzScrollBar.Tracking = False
          HorzScrollBar.Visible = True
          VertScrollBar.ButtonSize = 0
          VertScrollBar.Color = clBtnHighlight
          VertScrollBar.Increment = 8
          VertScrollBar.Margin = 0
          VertScrollBar.ParentColor = True
          VertScrollBar.Position = 0
          VertScrollBar.Range = 0
          VertScrollBar.Smooth = False
          VertScrollBar.Size = 0
          VertScrollBar.Style = ssRegular
          VertScrollBar.ThumbSize = 0
          VertScrollBar.Tracking = False
          VertScrollBar.Visible = True
          Action = nil
          ActiveControl = nil
          Align = alNone
          Anchors = [akLeft, akTop]
          AutoSize = False
          BorderIcons = [biSystemMenu, biMinimize, biMaximize]
          BorderStyle = bsDialog
          BorderWidth = 0
          Caption = 'Параметры ФР Пирит'
          ClientHeight = 271
          ClientWidth = 494
          Color = clBtnFace
          Constraints.MaxHeight = 0
          Constraints.MaxWidth = 0
          Constraints.MinHeight = 0
          Constraints.MinWidth = 0
          Ctl3D = True
          UseDockManager = False
          DefaultMonitor = dmActiveForm
          DockSite = False
          DragKind = dkDrag
          DragMode = dmManual
          Enabled = True
          ParentFont = False
          Font.Charset = DEFAULT_CHARSET
          Font.Color = clWindowText
          Font.Height = -11
          Font.Name = 'MS Sans Serif'
          Font.Pitch = fpDefault
          Font.Style = []
          FormStyle = fsNormal
          HelpFile = ''
          KeyPreview = False
          Menu = nil
          OldCreateOrder = False
          ObjectMenuItem = nil
          ParentBiDiMode = True
          PopupMenu = nil
          Position = poDesigned
          PrintScale = poProportional
          Scaled = True
          Visible = False
          WindowState = wsNormal
          WindowMenu = nil
          ShowSpeedButton = False
          PixelsPerInch = 96
          TextHeight = 13
          object usrg_btnOK: TButton
            Tag = 0
            Left = 245
            Top = 240
            Width = 75
            Height = 21
            Cursor = crDefault
            Action = usrg_actOk
            Anchors = [akLeft, akTop]
            Cancel = False
            Constraints.MaxHeight = 0
            Constraints.MaxWidth = 0
            Constraints.MinHeight = 0
            Constraints.MinWidth = 0
            Default = False
            DragCursor = crDrag
            DragKind = dkDrag
            DragMode = dmManual
            Font.Charset = DEFAULT_CHARSET
            Font.Color = clWindowText
            Font.Height = -11
            Font.Name = 'Tahoma'
            Font.Pitch = fpDefault
            Font.Style = []
            ModalResult = 0
            ParentBiDiMode = True
            ParentFont = False
            ParentShowHint = True
            PopupMenu = nil
            TabOrder = 0
            TabStop = True
          end
          object usrg_btnCancel: TButton
            Tag = 0
            Left = 331
            Top = 240
            Width = 75
            Height = 21
            Cursor = crDefault
            Action = usrg_actCancel
            Anchors = [akLeft, akTop]
            Cancel = False
            Constraints.MaxHeight = 0
            Constraints.MaxWidth = 0
            Constraints.MinHeight = 0
            Constraints.MinWidth = 0
            Default = False
            DragCursor = crDrag
            DragKind = dkDrag
            DragMode = dmManual
            Font.Charset = DEFAULT_CHARSET
            Font.Color = clWindowText
            Font.Height = -11
            Font.Name = 'Tahoma'
            Font.Pitch = fpDefault
            Font.Style = []
            ModalResult = 0
            ParentBiDiMode = True
            ParentFont = False
            ParentShowHint = True
            PopupMenu = nil
            TabOrder = 2
            TabStop = True
          end
          object usrg_PageControl: TPageControl
            Tag = 0
            Left = 0
            Top = 0
            Width = 494
            Height = 229
            Cursor = crDefault
            Hint = ''
            HelpContext = 0
            ActivePage = usrg_tsConnection
            Align = alTop
            Anchors = [akLeft, akTop, akRight]
            Constraints.MaxHeight = 0
            Constraints.MaxWidth = 0
            Constraints.MinHeight = 0
            Constraints.MinWidth = 0
            DockSite = False
            DragCursor = crDrag
            DragKind = dkDrag
            DragMode = dmManual
            Enabled = True
            HotTrack = False
            Images = nil
            MultiLine = False
            OwnerDraw = False
            ParentBiDiMode = True
            ParentFont = True
            ParentShowHint = True
            PopupMenu = nil
            RaggedRight = False
            ScrollOpposite = False
            Style = tsTabs
            TabHeight = 0
            TabOrder = 1
            TabPosition = tpTop
            TabStop = True
            TabWidth = 0
            Visible = True
            object usrg_tsConnection: TTabSheet
              Tag = 0
              Cursor = crDefault
              Hint = ''
              HelpContext = 0
              BorderWidth = 0
              Caption = 'Подключение'
              DragMode = dmManual
              Enabled = True
              Highlighted = False
              ImageIndex = 0
              Constraints.MaxHeight = 0
              Constraints.MaxWidth = 0
              Constraints.MinHeight = 0
              Constraints.MinWidth = 0
              ParentFont = True
              ParentShowHint = True
              PopupMenu = nil
              TabVisible = True
              object usrg_pnlConnection: TPanel
                Tag = 0
                Left = 0
                Top = 0
                Width = 486
                Height = 201
                Cursor = crDefault
                Hint = ''
                HelpContext = 0
                Align = alClient
                Alignment = taCenter
                Anchors = [akLeft, akTop, akRight, akBottom]
                AutoSize = False
                BevelInner = bvRaised
                BevelOuter = bvLowered
                BevelWidth = 1
                BorderWidth = 0
                BorderStyle = bsNone
                Caption = ''
                Color = clBtnFace
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                UseDockManager = True
                DockSite = False
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                FullRepaint = True
                Locked = False
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                TabOrder = 0
                TabStop = False
                Visible = True
                object usrg_lblCOM: TLabel
                  Tag = 0
                  Left = 9
                  Top = 9
                  Width = 50
                  Height = 13
                  Cursor = crDefault
                  Hint = ''
                  Align = alNone
                  Alignment = taLeftJustify
                  Anchors = [akLeft, akTop]
                  AutoSize = True
                  Caption = 'Com-порт:'
                  Constraints.MaxHeight = 0
                  Constraints.MaxWidth = 0
                  Constraints.MinHeight = 0
                  Constraints.MinWidth = 0
                  DragCursor = crDrag
                  DragKind = dkDrag
                  DragMode = dmManual
                  Enabled = True
                  FocusControl = nil
                  ParentBiDiMode = True
                  ParentColor = True
                  ParentFont = True
                  ParentShowHint = True
                  PopupMenu = nil
                  ShowAccelChar = True
                  Transparent = False
                  Layout = tlTop
                  Visible = True
                  WordWrap = False
                end
                object usrg_lblPassw: TLabel
                  Tag = 0
                  Left = 9
                  Top = 33
                  Width = 41
                  Height = 13
                  Cursor = crDefault
                  Hint = ''
                  Align = alNone
                  Alignment = taLeftJustify
                  Anchors = [akLeft, akTop]
                  AutoSize = True
                  Caption = 'Пароль:'
                  Constraints.MaxHeight = 0
                  Constraints.MaxWidth = 0
                  Constraints.MinHeight = 0
                  Constraints.MinWidth = 0
                  DragCursor = crDrag
                  DragKind = dkDrag
                  DragMode = dmManual
                  Enabled = True
                  FocusControl = nil
                  ParentBiDiMode = True
                  ParentColor = True
                  ParentFont = True
                  ParentShowHint = True
                  PopupMenu = nil
                  ShowAccelChar = True
                  Transparent = False
                  Layout = tlTop
                  Visible = True
                  WordWrap = False
                end
                object usrg_edPassword: TEdit
                  Tag = 0
                  Left = 66
                  Top = 30
                  Width = 130
                  Height = 21
                  Cursor = crDefault
                  Hint = ''
                  HelpContext = 0
                  TabStop = True
                  Anchors = [akLeft, akTop]
                  AutoSelect = True
                  AutoSize = True
                  BorderStyle = bsSingle
                  CharCase = ecNormal
                  Color = clWindow
                  Constraints.MaxHeight = 0
                  Constraints.MaxWidth = 0
                  Constraints.MinHeight = 0
                  Constraints.MinWidth = 0
                  DragCursor = crDrag
                  DragKind = dkDrag
                  DragMode = dmManual
                  Enabled = True
                  HideSelection = True
                  ImeMode = imDontCare
                  ImeName = ''
                  MaxLength = 0
                  OEMConvert = False
                  ParentBiDiMode = True
                  ParentColor = False
                  ParentCtl3D = True
                  ParentFont = True
                  ParentShowHint = True
                  PasswordChar = #0
                  PopupMenu = nil
                  ReadOnly = False
                  TabOrder = 1
                  Text = 'PIRI'
                  Visible = True
                end
                object usrg_rgBaudRate: TRadioGroup
                  Tag = 0
                  Left = 10
                  Top = 53
                  Width = 187
                  Height = 142
                  Cursor = crDefault
                  Hint = ''
                  HelpContext = 0
                  Align = alNone
                  Anchors = [akLeft, akTop]
                  Caption = 'Скорость:'
                  Columns = 1
                  DragCursor = crDrag
                  DragKind = dkDrag
                  DragMode = dmManual
                  Enabled = True
                  ItemIndex = 4
                  Items.Strings = (
                    '4800'
                    '9600'
                    '19200'
                    '38400'
                    '57600'
                    '115200')
                  Constraints.MaxHeight = 0
                  Constraints.MaxWidth = 0
                  Constraints.MinHeight = 0
                  Constraints.MinWidth = 0
                  ParentBiDiMode = True
                  ParentColor = True
                  ParentCtl3D = True
                  ParentFont = True
                  ParentShowHint = True
                  PopupMenu = nil
                  TabOrder = 2
                  TabStop = False
                  Visible = True
                end
                object usrg_edComPort: TxCalculatorEdit
                  Tag = 0
                  Left = 66
                  Top = 8
                  Width = 65
                  Height = 21
                  Cursor = crIBeam
                  Hint = ''
                  HelpContext = 0
                  TabStop = True
                  Anchors = [akLeft, akTop]
                  AutoSelect = True
                  AutoSize = True
                  BorderStyle = bsSingle
                  CharCase = ecNormal
                  Color = clWindow
                  Constraints.MaxHeight = 0
                  Constraints.MaxWidth = 0
                  Constraints.MinHeight = 0
                  Constraints.MinWidth = 0
                  DragCursor = crDrag
                  DragKind = dkDrag
                  DragMode = dmManual
                  Enabled = True
                  HideSelection = True
                  ImeMode = imDontCare
                  ImeName = ''
                  MaxLength = 0
                  OEMConvert = False
                  ParentBiDiMode = True
                  ParentColor = False
                  ParentCtl3D = True
                  ParentFont = True
                  ParentShowHint = True
                  PasswordChar = #0
                  PopupMenu = nil
                  ReadOnly = False
                  TabOrder = 0
                  Text = '6'
                  Visible = True
                  Value = 6
                  DecDigits = -1
                end
              end
            end
            object usrg_tsDesign: TTabSheet
              Tag = 0
              Cursor = crDefault
              Hint = ''
              HelpContext = 0
              BorderWidth = 0
              Caption = 'Дизайн'
              DragMode = dmManual
              Enabled = True
              Highlighted = False
              ImageIndex = 0
              Constraints.MaxHeight = 0
              Constraints.MaxWidth = 0
              Constraints.MinHeight = 0
              Constraints.MinWidth = 0
              ParentFont = True
              ParentShowHint = True
              PopupMenu = nil
              TabVisible = True
              object usrg_cbEconomicPrint: TCheckBox
                Tag = 0
                Left = 15
                Top = 7
                Width = 369
                Height = 17
                Cursor = crDefault
                Hint = ''
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = 'Печать с уменьшенным межстрочным интервалом'
                Checked = True
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                State = cbChecked
                TabOrder = 0
                Visible = True
              end
              object usrg_cbFullCut: TCheckBox
                Tag = 0
                Left = 15
                Top = 29
                Width = 233
                Height = 17
                Cursor = crDefault
                Hint = ''
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = 'Полная отрезка чека'
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                State = cbUnchecked
                TabOrder = 1
                Visible = True
              end
              object usrg_mDesign: TMemo
                Tag = 0
                Left = 15
                Top = 56
                Width = 169
                Height = 105
                Cursor = crDefault
                Hint = ''
                HelpContext = 0
                TabStop = True
                Align = alNone
                Alignment = taLeftJustify
                Anchors = [akLeft, akTop]
                BorderStyle = bsSingle
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                HideSelection = True
                ImeMode = imDontCare
                ImeName = ''
                Lines.Strings = (
                  'Номер дизайна чека: '
                  '0- обычный (*)  '
                  '1- расширенный  '
                  '2- экономный  '
                  '3- для бумаги 57мм  '
                  '16 - 31 - дополнительные '
                  'загружаемые дизайны     ')
                MaxLength = 0
                OEMConvert = False
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                ReadOnly = True
                ScrollBars = ssNone
                TabOrder = 2
                Visible = True
                WantReturns = True
                WantTabs = False
                WordWrap = True
              end
              object usrg_edDesignType: TxCalculatorEdit
                Tag = 0
                Left = 194
                Top = 57
                Width = 65
                Height = 21
                Cursor = crIBeam
                Hint = ''
                HelpContext = 0
                TabStop = True
                Anchors = [akLeft, akTop]
                AutoSelect = True
                AutoSize = True
                BorderStyle = bsSingle
                CharCase = ecNormal
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                HideSelection = True
                ImeMode = imDontCare
                ImeName = ''
                MaxLength = 0
                OEMConvert = False
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = True
                PasswordChar = #0
                PopupMenu = nil
                ReadOnly = False
                TabOrder = 3
                Text = '0'
                Visible = True
                Value = 0
                DecDigits = -1
              end
            end
            object usrg_tsFonts: TTabSheet
              Tag = 0
              Cursor = crDefault
              Hint = ''
              HelpContext = 0
              BorderWidth = 0
              Caption = 'Шрифты дескрипторов'
              DragMode = dmManual
              Enabled = True
              Highlighted = False
              ImageIndex = 0
              Constraints.MaxHeight = 0
              Constraints.MaxWidth = 0
              Constraints.MinHeight = 0
              Constraints.MinWidth = 0
              ParentFont = True
              ParentShowHint = True
              PopupMenu = nil
              TabVisible = True
              object usrg_lblDocNumber: TLabel
                Tag = 0
                Left = 15
                Top = 30
                Width = 68
                Height = 13
                Cursor = crDefault
                Hint = ''
                Align = alNone
                Alignment = taLeftJustify
                Anchors = [akLeft, akTop]
                AutoSize = True
                Caption = '№ документа'
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                FocusControl = nil
                ParentBiDiMode = True
                ParentColor = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                ShowAccelChar = True
                Transparent = False
                Layout = tlTop
                Visible = True
                WordWrap = False
              end
              object usrg_lblUser: TLabel
                Tag = 0
                Left = 15
                Top = 51
                Width = 173
                Height = 13
                Cursor = crDefault
                Hint = ''
                Align = alNone
                Alignment = taLeftJustify
                Anchors = [akLeft, akTop]
                AutoSize = True
                Caption = 'Пользователь (кассир, официант)'
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                FocusControl = nil
                ParentBiDiMode = True
                ParentColor = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                ShowAccelChar = True
                Transparent = False
                Layout = tlTop
                Visible = True
                WordWrap = False
              end
              object usrg_lblPlaceType: TLabel
                Tag = 0
                Left = 15
                Top = 71
                Width = 131
                Height = 13
                Cursor = crDefault
                Hint = ''
                Align = alNone
                Alignment = taLeftJustify
                Anchors = [akLeft, akTop]
                AutoSize = True
                Caption = 'Объект (магазин, столик)'
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                FocusControl = nil
                ParentBiDiMode = True
                ParentColor = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                ShowAccelChar = True
                Transparent = False
                Layout = tlTop
                Visible = True
                WordWrap = False
              end
              object usrg_lblSectionType: TLabel
                Tag = 0
                Left = 15
                Top = 92
                Width = 224
                Height = 13
                Cursor = crDefault
                Hint = ''
                Align = alNone
                Alignment = taLeftJustify
                Anchors = [akLeft, akTop]
                AutoSize = True
                Caption = '№ внутри объекта (место за столом, касса)'
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                FocusControl = nil
                ParentBiDiMode = True
                ParentColor = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                ShowAccelChar = True
                Transparent = False
                Layout = tlTop
                Visible = True
                WordWrap = False
              end
              object usrg_lblBillNumber: TLabel
                Tag = 0
                Left = 15
                Top = 112
                Width = 192
                Height = 13
                Cursor = crDefault
                Hint = ''
                Align = alNone
                Alignment = taLeftJustify
                Anchors = [akLeft, akTop]
                AutoSize = True
                Caption = '№ счета (пречека), связанного док-та'
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                FocusControl = nil
                ParentBiDiMode = True
                ParentColor = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                ShowAccelChar = True
                Transparent = False
                Layout = tlTop
                Visible = True
                WordWrap = False
              end
              object usrg_lblAddInfoEmployee: TLabel
                Tag = 0
                Left = 15
                Top = 133
                Width = 53
                Height = 13
                Cursor = crDefault
                Hint = ''
                Align = alNone
                Alignment = taLeftJustify
                Anchors = [akLeft, akTop]
                AutoSize = True
                Caption = 'Сотрудник'
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                FocusControl = nil
                ParentBiDiMode = True
                ParentColor = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                ShowAccelChar = True
                Transparent = False
                Layout = tlTop
                Visible = True
                WordWrap = False
              end
              object usrg_lblAddInfoCard: TLabel
                Tag = 0
                Left = 15
                Top = 153
                Width = 30
                Height = 13
                Cursor = crDefault
                Hint = ''
                Align = alNone
                Alignment = taLeftJustify
                Anchors = [akLeft, akTop]
                AutoSize = True
                Caption = 'Карта'
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                FocusControl = nil
                ParentBiDiMode = True
                ParentColor = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                ShowAccelChar = True
                Transparent = False
                Layout = tlTop
                Visible = True
                WordWrap = False
              end
              object usrg_lblAddInfoOther: TLabel
                Tag = 0
                Left = 15
                Top = 174
                Width = 37
                Height = 13
                Cursor = crDefault
                Hint = ''
                Align = alNone
                Alignment = taLeftJustify
                Anchors = [akLeft, akTop]
                AutoSize = True
                Caption = 'Другое'
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                FocusControl = nil
                ParentBiDiMode = True
                ParentColor = True
                ParentFont = True
                ParentShowHint = True
                PopupMenu = nil
                ShowAccelChar = True
                Transparent = False
                Layout = tlTop
                Visible = True
                WordWrap = False
              end
              object usrg_lblCaptionName: TLabel
                Tag = 0
                Left = 15
                Top = 6
                Width = 59
                Height = 13
                Cursor = crDefault
                Hint = ''
                Align = alNone
                Alignment = taLeftJustify
                Anchors = [akLeft, akTop]
                AutoSize = True
                Caption = 'Название'
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                FocusControl = nil
                Font.Charset = DEFAULT_CHARSET
                Font.Color = clWindowText
                Font.Height = -11
                Font.Name = 'MS Sans Serif'
                Font.Pitch = fpDefault
                Font.Style = [fsBold]
                ParentBiDiMode = True
                ParentColor = True
                ParentFont = False
                ParentShowHint = True
                PopupMenu = nil
                ShowAccelChar = True
                Transparent = False
                Layout = tlTop
                Visible = True
                WordWrap = False
              end
              object usrg_lblCaptionFont: TLabel
                Tag = 0
                Left = 247
                Top = 6
                Width = 40
                Height = 13
                Cursor = crDefault
                Hint = ''
                Align = alNone
                Alignment = taLeftJustify
                Anchors = [akLeft, akTop]
                AutoSize = True
                Caption = 'Шрифт'
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                FocusControl = nil
                Font.Charset = DEFAULT_CHARSET
                Font.Color = clWindowText
                Font.Height = -11
                Font.Name = 'MS Sans Serif'
                Font.Pitch = fpDefault
                Font.Style = [fsBold]
                ParentBiDiMode = True
                ParentColor = True
                ParentFont = False
                ParentShowHint = True
                PopupMenu = nil
                ShowAccelChar = True
                Transparent = False
                Layout = tlTop
                Visible = True
                WordWrap = False
              end
              object usrg_lblCaptionDH: TLabel
                Tag = 0
                Left = 359
                Top = 6
                Width = 46
                Height = 13
                Cursor = crDefault
                Hint = ''
                Align = alNone
                Alignment = taLeftJustify
                Anchors = [akLeft, akTop]
                AutoSize = True
                Caption = 'Выс х 2'
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                FocusControl = nil
                Font.Charset = DEFAULT_CHARSET
                Font.Color = clWindowText
                Font.Height = -11
                Font.Name = 'MS Sans Serif'
                Font.Pitch = fpDefault
                Font.Style = [fsBold]
                ParentBiDiMode = True
                ParentColor = True
                ParentFont = False
                ParentShowHint = True
                PopupMenu = nil
                ShowAccelChar = True
                Transparent = False
                Layout = tlTop
                Visible = True
                WordWrap = False
              end
              object usrg_lblCaptionDW: TLabel
                Tag = 0
                Left = 420
                Top = 6
                Width = 46
                Height = 13
                Cursor = crDefault
                Hint = ''
                Align = alNone
                Alignment = taLeftJustify
                Anchors = [akLeft, akTop]
                AutoSize = True
                Caption = 'Шир х 2'
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                FocusControl = nil
                Font.Charset = DEFAULT_CHARSET
                Font.Color = clWindowText
                Font.Height = -11
                Font.Name = 'MS Sans Serif'
                Font.Pitch = fpDefault
                Font.Style = [fsBold]
                ParentBiDiMode = True
                ParentColor = True
                ParentFont = False
                ParentShowHint = True
                PopupMenu = nil
                ShowAccelChar = True
                Transparent = False
                Layout = tlTop
                Visible = True
                WordWrap = False
              end
              object usrg_cbDocNumber: TComboBox
                Tag = 0
                Left = 248
                Top = 26
                Width = 100
                Height = 21
                Cursor = crDefault
                Hint = 'Шрифт'
                HelpContext = 0
                TabStop = True
                Style = csDropDown
                Anchors = [akLeft, akTop]
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                DropDownCount = 8
                Enabled = True
                ImeMode = imDontCare
                ImeName = ''
                ItemHeight = 13
                MaxLength = 0
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                Sorted = False
                TabOrder = 0
                Text = '13х24'
                Visible = True
                Items.Strings = (
                  '13х24'
                  '10х24'
                  '13х24_Pirit_bold'
                  '10х20_Pirit_bold'
                  '8х14'
                  '24х45'
                  '24х45_bold'
                  '13х24_Pirit'
                  '10х20_Pirit')
              end
              object usrg_cbUser: TComboBox
                Tag = 0
                Left = 248
                Top = 47
                Width = 100
                Height = 21
                Cursor = crDefault
                Hint = 'Шрифт'
                HelpContext = 0
                TabStop = True
                Style = csDropDown
                Anchors = [akLeft, akTop]
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                DropDownCount = 8
                Enabled = True
                ImeMode = imDontCare
                ImeName = ''
                ItemHeight = 13
                MaxLength = 0
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                Sorted = False
                TabOrder = 3
                Text = ''
                Visible = True
                Items.Strings = (
                  '13х24'
                  '10х24'
                  '13х24_Pirit_bold'
                  '10х20_Pirit_bold'
                  '8х14'
                  '24х45'
                  '24х45_bold'
                  '13х24_Pirit'
                  '10х20_Pirit')
              end
              object usrg_cbPlaceType: TComboBox
                Tag = 0
                Left = 248
                Top = 67
                Width = 100
                Height = 21
                Cursor = crDefault
                Hint = 'Шрифт'
                HelpContext = 0
                TabStop = True
                Style = csDropDown
                Anchors = [akLeft, akTop]
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                DropDownCount = 8
                Enabled = True
                ImeMode = imDontCare
                ImeName = ''
                ItemHeight = 13
                MaxLength = 0
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                Sorted = False
                TabOrder = 6
                Text = ''
                Visible = True
                Items.Strings = (
                  '13х24'
                  '10х24'
                  '13х24_Pirit_bold'
                  '10х20_Pirit_bold'
                  '8х14'
                  '24х45'
                  '24х45_bold'
                  '13х24_Pirit'
                  '10х20_Pirit')
              end
              object usrg_cbSectionType: TComboBox
                Tag = 0
                Left = 248
                Top = 88
                Width = 100
                Height = 21
                Cursor = crDefault
                Hint = 'Шрифт'
                HelpContext = 0
                TabStop = True
                Style = csDropDown
                Anchors = [akLeft, akTop]
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                DropDownCount = 8
                Enabled = True
                ImeMode = imDontCare
                ImeName = ''
                ItemHeight = 13
                MaxLength = 0
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                Sorted = False
                TabOrder = 9
                Text = ''
                Visible = True
                Items.Strings = (
                  '13х24'
                  '10х24'
                  '13х24_Pirit_bold'
                  '10х20_Pirit_bold'
                  '8х14'
                  '24х45'
                  '24х45_bold'
                  '13х24_Pirit'
                  '10х20_Pirit')
              end
              object usrg_cbBillNumber: TComboBox
                Tag = 0
                Left = 248
                Top = 108
                Width = 100
                Height = 21
                Cursor = crDefault
                Hint = 'Шрифт'
                HelpContext = 0
                TabStop = True
                Style = csDropDown
                Anchors = [akLeft, akTop]
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                DropDownCount = 8
                Enabled = True
                ImeMode = imDontCare
                ImeName = ''
                ItemHeight = 13
                MaxLength = 0
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                Sorted = False
                TabOrder = 12
                Text = ''
                Visible = True
                Items.Strings = (
                  '13х24'
                  '10х24'
                  '13х24_Pirit_bold'
                  '10х20_Pirit_bold'
                  '8х14'
                  '24х45'
                  '24х45_bold'
                  '13х24_Pirit'
                  '10х20_Pirit')
              end
              object usrg_cbAddInfoEmployee: TComboBox
                Tag = 0
                Left = 248
                Top = 129
                Width = 100
                Height = 21
                Cursor = crDefault
                Hint = 'Шрифт'
                HelpContext = 0
                TabStop = True
                Style = csDropDown
                Anchors = [akLeft, akTop]
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                DropDownCount = 8
                Enabled = True
                ImeMode = imDontCare
                ImeName = ''
                ItemHeight = 13
                MaxLength = 0
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                Sorted = False
                TabOrder = 15
                Text = ''
                Visible = True
                Items.Strings = (
                  '13х24'
                  '10х24'
                  '13х24_Pirit_bold'
                  '10х20_Pirit_bold'
                  '8х14'
                  '24х45'
                  '24х45_bold'
                  '13х24_Pirit'
                  '10х20_Pirit')
              end
              object usrg_cbAddInfoCard: TComboBox
                Tag = 0
                Left = 248
                Top = 149
                Width = 100
                Height = 21
                Cursor = crDefault
                Hint = 'Шрифт'
                HelpContext = 0
                TabStop = True
                Style = csDropDown
                Anchors = [akLeft, akTop]
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                DropDownCount = 8
                Enabled = True
                ImeMode = imDontCare
                ImeName = ''
                ItemHeight = 13
                MaxLength = 0
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                Sorted = False
                TabOrder = 18
                Text = ''
                Visible = True
                Items.Strings = (
                  '13х24'
                  '10х24'
                  '13х24_Pirit_bold'
                  '10х20_Pirit_bold'
                  '8х14'
                  '24х45'
                  '24х45_bold'
                  '13х24_Pirit'
                  '10х20_Pirit')
              end
              object usrg_cbAddInfoOther: TComboBox
                Tag = 0
                Left = 248
                Top = 170
                Width = 100
                Height = 21
                Cursor = crDefault
                Hint = 'Шрифт'
                HelpContext = 0
                TabStop = True
                Style = csDropDown
                Anchors = [akLeft, akTop]
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                DropDownCount = 8
                Enabled = True
                ImeMode = imDontCare
                ImeName = ''
                ItemHeight = 13
                MaxLength = 0
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                Sorted = False
                TabOrder = 21
                Text = ''
                Visible = True
                Items.Strings = (
                  '13х24'
                  '10х24'
                  '13х24_Pirit_bold'
                  '10х20_Pirit_bold'
                  '8х14'
                  '24х45'
                  '24х45_bold'
                  '13х24_Pirit'
                  '10х20_Pirit')
              end
              object usrg_cbDocNumberH: TCheckBox
                Tag = 0
                Left = 369
                Top = 26
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная высота'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 1
                Visible = True
              end
              object usrg_cbDocNumberW: TCheckBox
                Tag = 0
                Left = 434
                Top = 26
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная ширина'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 2
                Visible = True
              end
              object usrg_cbUserH: TCheckBox
                Tag = 0
                Left = 369
                Top = 47
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная высота'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 4
                Visible = True
              end
              object usrg_cbUserW: TCheckBox
                Tag = 0
                Left = 434
                Top = 47
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная ширина'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 5
                Visible = True
              end
              object usrg_cbPlaceTypeH: TCheckBox
                Tag = 0
                Left = 369
                Top = 67
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная высота'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 7
                Visible = True
              end
              object usrg_cbPlaceTypeW: TCheckBox
                Tag = 0
                Left = 434
                Top = 67
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная ширина'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 8
                Visible = True
              end
              object usrg_cbSectionTypeH: TCheckBox
                Tag = 0
                Left = 369
                Top = 88
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная высота'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 10
                Visible = True
              end
              object usrg_cbSectionTypeW: TCheckBox
                Tag = 0
                Left = 434
                Top = 88
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная ширина'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 11
                Visible = True
              end
              object usrg_cbBillNumberH: TCheckBox
                Tag = 0
                Left = 369
                Top = 108
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная высота'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 13
                Visible = True
              end
              object usrg_cbBillNumberW: TCheckBox
                Tag = 0
                Left = 434
                Top = 108
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная ширина'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 14
                Visible = True
              end
              object usrg_cbAddInfoEmployeeH: TCheckBox
                Tag = 0
                Left = 369
                Top = 129
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная высота'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 16
                Visible = True
              end
              object usrg_cbAddInfoEmployeeW: TCheckBox
                Tag = 0
                Left = 434
                Top = 129
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная ширина'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 17
                Visible = True
              end
              object usrg_cbAddInfoCardH: TCheckBox
                Tag = 0
                Left = 369
                Top = 149
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная высота'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 19
                Visible = True
              end
              object usrg_cbAddInfoCardW: TCheckBox
                Tag = 0
                Left = 434
                Top = 149
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная ширина'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 20
                Visible = True
              end
              object usrg_cbAddInfoOtherH: TCheckBox
                Tag = 0
                Left = 369
                Top = 170
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная высота'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 22
                Visible = True
              end
              object usrg_cbAddInfoOtherW: TCheckBox
                Tag = 0
                Left = 434
                Top = 170
                Width = 33
                Height = 17
                Cursor = crDefault
                Hint = 'Двойная ширина'
                HelpContext = 0
                TabStop = True
                Action = nil
                Alignment = taRightJustify
                AllowGrayed = False
                Anchors = [akLeft, akTop]
                Caption = ''
                Checked = False
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                ParentBiDiMode = True
                ParentColor = True
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PopupMenu = nil
                ShowHint = True
                State = cbUnchecked
                TabOrder = 23
                Visible = True
              end
            end
            object usrg_tsHeader: TTabSheet
              Tag = 0
              Cursor = crDefault
              Hint = ''
              HelpContext = 0
              BorderWidth = 0
              Caption = 'Заголовок \ подножие'
              DragMode = dmManual
              Enabled = True
              Highlighted = False
              ImageIndex = 0
              Constraints.MaxHeight = 0
              Constraints.MaxWidth = 0
              Constraints.MinHeight = 0
              Constraints.MinWidth = 0
              ParentFont = True
              ParentShowHint = True
              PopupMenu = nil
              TabVisible = True
              object usrg_lblCaptionHeader: TLabel
                Tag = 0
                Left = 15
                Top = 6
                Width = 64
                Height = 13
                Cursor = crDefault
                Hint = ''
                Align = alNone
                Alignment = taLeftJustify
                Anchors = [akLeft, akTop]
                AutoSize = True
                Caption = 'Заголовок'
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                FocusControl = nil
                Font.Charset = DEFAULT_CHARSET
                Font.Color = clWindowText
                Font.Height = -11
                Font.Name = 'MS Sans Serif'
                Font.Pitch = fpDefault
                Font.Style = [fsBold]
                ParentBiDiMode = True
                ParentColor = True
                ParentFont = False
                ParentShowHint = True
                PopupMenu = nil
                ShowAccelChar = True
                Transparent = False
                Layout = tlTop
                Visible = True
                WordWrap = False
              end
              object usrg_lblCaptionFooter: TLabel
                Tag = 0
                Left = 247
                Top = 6
                Width = 61
                Height = 13
                Cursor = crDefault
                Hint = ''
                Align = alNone
                Alignment = taLeftJustify
                Anchors = [akLeft, akTop]
                AutoSize = True
                Caption = 'Подножие'
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                FocusControl = nil
                Font.Charset = DEFAULT_CHARSET
                Font.Color = clWindowText
                Font.Height = -11
                Font.Name = 'MS Sans Serif'
                Font.Pitch = fpDefault
                Font.Style = [fsBold]
                ParentBiDiMode = True
                ParentColor = True
                ParentFont = False
                ParentShowHint = True
                PopupMenu = nil
                ShowAccelChar = True
                Transparent = False
                Layout = tlTop
                Visible = True
                WordWrap = False
              end
              object usrg_eH1: TEdit
                Tag = 0
                Left = 15
                Top = 27
                Width = 225
                Height = 21
                Cursor = crDefault
                Hint = 'Строка заголовка 1'
                HelpContext = 0
                TabStop = True
                Anchors = [akLeft, akTop]
                AutoSelect = True
                AutoSize = True
                BorderStyle = bsSingle
                CharCase = ecNormal
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                HideSelection = True
                ImeMode = imDontCare
                ImeName = ''
                MaxLength = 0
                OEMConvert = False
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PasswordChar = #0
                PopupMenu = nil
                ReadOnly = False
                ShowHint = True
                TabOrder = 0
                Text = ''
                Visible = True
              end
              object usrg_eH2: TEdit
                Tag = 0
                Left = 15
                Top = 50
                Width = 225
                Height = 21
                Cursor = crDefault
                Hint = 'Строка заголовка 2'
                HelpContext = 0
                TabStop = True
                Anchors = [akLeft, akTop]
                AutoSelect = True
                AutoSize = True
                BorderStyle = bsSingle
                CharCase = ecNormal
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                HideSelection = True
                ImeMode = imDontCare
                ImeName = ''
                MaxLength = 0
                OEMConvert = False
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PasswordChar = #0
                PopupMenu = nil
                ReadOnly = False
                ShowHint = True
                TabOrder = 1
                Text = ''
                Visible = True
              end
              object usrg_eH3: TEdit
                Tag = 0
                Left = 15
                Top = 73
                Width = 225
                Height = 21
                Cursor = crDefault
                Hint = 'Строка заголовка 3'
                HelpContext = 0
                TabStop = True
                Anchors = [akLeft, akTop]
                AutoSelect = True
                AutoSize = True
                BorderStyle = bsSingle
                CharCase = ecNormal
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                HideSelection = True
                ImeMode = imDontCare
                ImeName = ''
                MaxLength = 0
                OEMConvert = False
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PasswordChar = #0
                PopupMenu = nil
                ReadOnly = False
                ShowHint = True
                TabOrder = 2
                Text = ''
                Visible = True
              end
              object usrg_eH4: TEdit
                Tag = 0
                Left = 15
                Top = 96
                Width = 225
                Height = 21
                Cursor = crDefault
                Hint = 'Строка заголовка 4'
                HelpContext = 0
                TabStop = True
                Anchors = [akLeft, akTop]
                AutoSelect = True
                AutoSize = True
                BorderStyle = bsSingle
                CharCase = ecNormal
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                HideSelection = True
                ImeMode = imDontCare
                ImeName = ''
                MaxLength = 0
                OEMConvert = False
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PasswordChar = #0
                PopupMenu = nil
                ReadOnly = False
                ShowHint = True
                TabOrder = 3
                Text = ''
                Visible = True
              end
              object usrg_eF1: TEdit
                Tag = 0
                Left = 247
                Top = 27
                Width = 225
                Height = 21
                Cursor = crDefault
                Hint = 'Строка подножия 1'
                HelpContext = 0
                TabStop = True
                Anchors = [akLeft, akTop]
                AutoSelect = True
                AutoSize = True
                BorderStyle = bsSingle
                CharCase = ecNormal
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                HideSelection = True
                ImeMode = imDontCare
                ImeName = ''
                MaxLength = 0
                OEMConvert = False
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PasswordChar = #0
                PopupMenu = nil
                ReadOnly = False
                ShowHint = True
                TabOrder = 4
                Text = ''
                Visible = True
              end
              object usrg_eF2: TEdit
                Tag = 0
                Left = 247
                Top = 50
                Width = 225
                Height = 21
                Cursor = crDefault
                Hint = 'Строка подножия 2'
                HelpContext = 0
                TabStop = True
                Anchors = [akLeft, akTop]
                AutoSelect = True
                AutoSize = True
                BorderStyle = bsSingle
                CharCase = ecNormal
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                HideSelection = True
                ImeMode = imDontCare
                ImeName = ''
                MaxLength = 0
                OEMConvert = False
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PasswordChar = #0
                PopupMenu = nil
                ReadOnly = False
                ShowHint = True
                TabOrder = 5
                Text = ''
                Visible = True
              end
              object usrg_eF3: TEdit
                Tag = 0
                Left = 247
                Top = 73
                Width = 225
                Height = 21
                Cursor = crDefault
                Hint = 'Строка подножия 3'
                HelpContext = 0
                TabStop = True
                Anchors = [akLeft, akTop]
                AutoSelect = True
                AutoSize = True
                BorderStyle = bsSingle
                CharCase = ecNormal
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                HideSelection = True
                ImeMode = imDontCare
                ImeName = ''
                MaxLength = 0
                OEMConvert = False
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PasswordChar = #0
                PopupMenu = nil
                ReadOnly = False
                ShowHint = True
                TabOrder = 6
                Text = ''
                Visible = True
              end
              object usrg_eF4: TEdit
                Tag = 0
                Left = 247
                Top = 96
                Width = 225
                Height = 21
                Cursor = crDefault
                Hint = 'Строка подножия 4'
                HelpContext = 0
                TabStop = True
                Anchors = [akLeft, akTop]
                AutoSelect = True
                AutoSize = True
                BorderStyle = bsSingle
                CharCase = ecNormal
                Color = clWindow
                Constraints.MaxHeight = 0
                Constraints.MaxWidth = 0
                Constraints.MinHeight = 0
                Constraints.MinWidth = 0
                DragCursor = crDrag
                DragKind = dkDrag
                DragMode = dmManual
                Enabled = True
                HideSelection = True
                ImeMode = imDontCare
                ImeName = ''
                MaxLength = 0
                OEMConvert = False
                ParentBiDiMode = True
                ParentColor = False
                ParentCtl3D = True
                ParentFont = True
                ParentShowHint = False
                PasswordChar = #0
                PopupMenu = nil
                ReadOnly = False
                ShowHint = True
                TabOrder = 7
                Text = ''
                Visible = True
              end
            end
          end
          object usrg_ActionList1: TActionList
            Tag = 0
            Images = nil
            Left = 250
            Top = 139
            object usrg_actOk: TgsAction
              Tag = 0
              Category = ''
              Caption = 'OK'
              Checked = False
              Enabled = True
              HelpContext = 0
              Hint = ''
              ImageIndex = -1
              ShortCut = 0
              Visible = True
            end
            object usrg_actCancel: TgsAction
              Tag = 0
              Category = ''
              Caption = 'Отмена'
              Checked = False
              Enabled = True
              HelpContext = 0
              Hint = ''
              ImageIndex = -1
              ShortCut = 0
              Visible = True
            end
          end
        end
        
  - 
    Properties: 
      Class: "TgdcStorageValue"
      RUID: 147029004_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      PARENT: "147029001_1219248801 GLOBAL\\NewForm\\usrf_ecr_Pirit_Params"
      NAME: "InternalType"
      CURR_DATA: ~
      DATA_TYPE: "I"
      DATETIME_DATA: ~
      INT_DATA: 1
      STR_DATA: ~
      EDITIONDATE: 2019-07-26T18:14:13+03:00
      BLOB_DATA: ~
  - 
    Properties: 
      Class: "TgdcReportGroup"
      RUID: 147029016_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147029022_1219248801
    Fields: 
      PARENT: ~
      NAME: "Отчеты(usrf_ecr_Pirit_Params)"
      DESCRIPTION: ~
      USERGROUPNAME: "147029016_1219248801"
      EDITIONDATE: 2019-07-26T18:20:01+03:00
  - 
    Properties: 
      Class: "TgdcMacrosGroup"
      RUID: 147029015_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147029022_1219248801
    Fields: 
      PARENT: ~
      NAME: "Локальные макросы"
      CLASSNAME: ""
      ISGLOBAL: 0
      OBJECTNAME: "usrf_ecr_Pirit_Params"
      OBJECTPARENT: ~
      SUBTYPE: ""
      EDITIONDATE: 2019-07-26T18:20:01+03:00
      DESCRIPTION: ~
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147029014_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147029022_1219248801
    Fields: 
      PARENT: ~
      NAME: "usrf_ecr_Pirit_Params"
      CLASSNAME: ""
      DESCRIPTION: ~
      MACROSGROUPKEY: "147029015_1219248801 Локальные макросы"
      OBJECTNAME: "usrf_ecr_Pirit_Params"
      OBJECTTYPE: 0
      REPORTGROUPKEY: "147029016_1219248801 Отчеты(usrf_ecr_Pirit_Params)"
      SUBTYPE: ""
      EDITIONDATE: 2019-07-26T18:20:01+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147029024_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147029022_1219248801
    Fields: 
      NAME: "usrg_actCancelOnExecute"
      COMMENT: ~
      EVENT: "ONEXECUTE"
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "EVENTS"
      MODULECODE: "147029014_1219248801 usrf_ecr_Pirit_Params"
      OBJECTNAME: "usrf_ecr_Pirit_Params"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2019-07-26T18:31:08+03:00
      DISPLAYSCRIPT: | 
        USRG_ACTCANCELONEXECUTE
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      SCRIPT: | 
        Option Explicit
        Sub usrg_actCancelOnExecute(ByVal Sender)
        '*** Данный код необходим для вызова встроенного обработчика ***
        '*** В случае его удаления возможно нарушение работы системы ***
          Call   Inherited(Sender, "OnExecute", Array(Sender))
        '*** конец кода поддержки встроенного обработчика            ***
          Sender.OwnerForm.ModalResult = vbCancel
        End Sub
        
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147029021_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147029022_1219248801
    Fields: 
      PARENT: "147029014_1219248801 usrf_ecr_Pirit_Params"
      NAME: "usrg_actCancel"
      CLASSNAME: ""
      DESCRIPTION: ~
      MACROSGROUPKEY: ~
      OBJECTNAME: "usrg_actCancel"
      OBJECTTYPE: 0
      REPORTGROUPKEY: ~
      SUBTYPE: ""
      EDITIONDATE: 2019-07-26T18:31:08+03:00
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147029022_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      DISABLE: 0
      EVENTNAME: "ONEXECUTE"
      FUNCTIONKEY: "147029024_1219248801 usrg_actCancelOnExecute"
      OBJECTKEY: "147029021_1219248801 usrf_ecr_Pirit_Params\\usrg_actCancel"
      OBJECTNAME: "usrg_actCancel"
      PARENTNAME: "usrf_ecr_Pirit_Params"
      EDITIONDATE: 2019-07-26T18:31:08+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147029020_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147029018_1219248801
    Fields: 
      NAME: "usrg_actOkOnExecute"
      COMMENT: ~
      EVENT: "ONEXECUTE"
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "EVENTS"
      MODULECODE: "147029014_1219248801 usrf_ecr_Pirit_Params"
      OBJECTNAME: "usrf_ecr_Pirit_Params"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2019-07-26T18:30:32+03:00
      DISPLAYSCRIPT: | 
        USRG_ACTOKONEXECUTE
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAU0VOREVSBgAAAFNFTkRFUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNU
        RkxQUg==
      SCRIPT: | 
        Option Explicit
        Sub usrg_actOkOnExecute(ByVal Sender)
        '*** Данный код необходим для вызова встроенного обработчика ***
        '*** В случае его удаления возможно нарушение работы системы ***
          Call   Inherited(Sender, "OnExecute", Array(Sender))
        '*** конец кода поддержки встроенного обработчика            ***
          Sender.OwnerForm.ModalResult = vbOk
        End Sub
        
  - 
    Properties: 
      Class: "TgdcDelphiObject"
      RUID: 147029017_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 147029018_1219248801
    Fields: 
      PARENT: "147029014_1219248801 usrf_ecr_Pirit_Params"
      NAME: "usrg_actOk"
      CLASSNAME: ""
      DESCRIPTION: ~
      MACROSGROUPKEY: ~
      OBJECTNAME: "usrg_actOk"
      OBJECTTYPE: 0
      REPORTGROUPKEY: ~
      SUBTYPE: ""
      EDITIONDATE: 2019-07-26T18:30:32+03:00
  - 
    Properties: 
      Class: "TgdcEvent"
      RUID: 147029018_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      DISABLE: 0
      EVENTNAME: "ONEXECUTE"
      FUNCTIONKEY: "147029020_1219248801 usrg_actOkOnExecute"
      OBJECTKEY: "147029017_1219248801 usrf_ecr_Pirit_Params\\usrg_actOk"
      OBJECTNAME: "usrg_actOk"
      PARENTNAME: "usrf_ecr_Pirit_Params"
      EDITIONDATE: 2019-07-26T18:30:32+03:00
  - 
    Properties: 
      Class: "TgdcAttrUserDefined"
      SubType: "USR$PF_ECR_TYPES"
      RUID: 147019370_1219248801
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      USR$NAME: "Фискальный регистратор Pirit"
      USR$FUNCTIONKEY: "147029455_1219248801 ecr_FR_Pirit_Create"
      USR$TYPE: 2
      Z_USR$FUNCTIONKEY_NAME: "ecr_FR_Pirit_Create"
      EDITIONDATE: 2019-07-31T21:58:55+03:00